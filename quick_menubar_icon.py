#!/usr/bin/env python3
"""
MacCleaner Guardian - IC√îNE BARRE DE MENU SIMPLE
Version rapide qui cr√©√© imm√©diatement une ic√¥ne visible dans la barre de menu
"""

import subprocess
import threading
import time
import json
import os
from datetime import datetime
from pathlib import Path

class QuickMenuBarIcon:
    """Ic√¥ne rapide barre de menu via AppleScript et Automator"""
    
    def __init__(self):
        self.config_file = Path.home() / '.maccleaner_guardian.json'
        self.monitoring_active = True
        self.current_icon = "üõ°Ô∏è"
        
        # Configuration
        self.config = {
            'auto_cleanup_enabled': True,
            'monitoring_interval': 60,
            'auto_cleanup_threshold': 85,
            'notifications_enabled': True
        }
        
        self.load_config()
        print("üõ°Ô∏è MacCleaner Guardian - Cr√©ation ic√¥ne barre de menu...")
    
    def load_config(self):
        """Charge la configuration"""
        try:
            if self.config_file.exists():
                with open(self.config_file, 'r') as f:
                    self.config.update(json.load(f))
        except:
            pass
    
    def create_menu_bar_app_bundle(self):
        """Cr√©e un app bundle qui appara√Æt dans la barre de menu"""
        
        # Cr√©er le r√©pertoire de l'application
        app_path = Path('/Users/loicdeloison/Desktop/MacCleaner/MacCleanerGuardian.app')
        contents_path = app_path / 'Contents'
        macos_path = contents_path / 'MacOS'
        resources_path = contents_path / 'Resources'
        
        # Cr√©er la structure
        macos_path.mkdir(parents=True, exist_ok=True)
        resources_path.mkdir(parents=True, exist_ok=True)
        
        # Cr√©er Info.plist pour une app barre de menu
        info_plist = '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleDisplayName</key>
    <string>MacCleaner Guardian</string>
    <key>CFBundleExecutable</key>
    <string>guardian</string>
    <key>CFBundleIconFile</key>
    <string>guardian_icon</string>
    <key>CFBundleIdentifier</key>
    <string>com.maccleaner.guardian</string>
    <key>CFBundleName</key>
    <string>MacCleanerGuardian</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>CFBundleShortVersionString</key>
    <string>1.0</string>
    <key>CFBundleVersion</key>
    <string>1.0</string>
    <key>LSUIElement</key>
    <true/>
    <key>LSBackgroundOnly</key>
    <false/>
    <key>NSHighResolutionCapable</key>
    <true/>
    <key>LSMinimumSystemVersion</key>
    <string>10.15</string>
</dict>
</plist>'''
        
        with open(contents_path / 'Info.plist', 'w') as f:
            f.write(info_plist)
        
        # Cr√©er le script ex√©cutable
        guardian_script = '''#!/bin/bash
cd "$(dirname "$0")/../../.."
exec python3 quick_menubar_icon.py --app-mode
'''
        
        with open(macos_path / 'guardian', 'w') as f:
            f.write(guardian_script)
        
        os.chmod(macos_path / 'guardian', 0o755)
        
        print(f"‚úÖ App bundle cr√©√©: {app_path}")
        return app_path
    
    def create_simple_menu_bar_script(self):
        """Cr√©e un script AppleScript qui ajoute une ic√¥ne persistante"""
        
        applescript_code = '''
        on run
            -- Configuration
            set guardianIcon to "üõ°Ô∏è"
            set guardianTitle to "MacCleaner Guardian"
            
            -- Cr√©er un processus en arri√®re-plan permanent
            tell application "System Events"
                -- Lancer le processus Guardian en arri√®re-plan
                do shell script "cd /Users/loicdeloison/Desktop/MacCleaner && python3 quick_menubar_icon.py --daemon > /dev/null 2>&1 &"
            end tell
            
            -- Notification de d√©marrage
            display notification "Guardian est maintenant actif dans la barre de menu" with title guardianTitle subtitle "Ic√¥ne üõ°Ô∏è ajout√©e" sound name "Funk"
            
            -- Attendre un peu puis afficher le menu initial
            delay 2
            
            -- Menu de confirmation
            display dialog "üõ°Ô∏è MacCleaner Guardian est maintenant actif !\\n\\nL'ic√¥ne üõ°Ô∏è a √©t√© ajout√©e √† la barre de menu.\\n\\nFonctionnalit√©s:\\n‚Ä¢ Surveillance automatique du syst√®me\\n‚Ä¢ Nettoyage intelligent\\n‚Ä¢ Notifications d'alerte\\n‚Ä¢ Menu accessible via l'ic√¥ne\\n\\nLe Guardian fonctionne maintenant en arri√®re-plan." buttons {"üìä Ouvrir Panneau", "‚úÖ OK"} default button "‚úÖ OK" with title "Guardian Actif" with icon note
            
            set userChoice to button returned of result
            
            if userChoice is "üìä Ouvrir Panneau" then
                do shell script "cd /Users/loicdeloison/Desktop/MacCleaner && python3 maccleaner_guardian.py > /dev/null 2>&1 &"
            end if
            
            return "Guardian started successfully"
        end run
        '''
        
        script_path = Path('/Users/loicdeloison/Desktop/MacCleaner/start_guardian_icon.scpt')
        with open(script_path, 'w') as f:
            f.write(applescript_code)
        
        return script_path
    
    def launch_menu_bar_icon(self):
        """Lance l'ic√¥ne dans la barre de menu"""
        
        # Cr√©er et lancer le script AppleScript
        script_path = self.create_simple_menu_bar_script()
        
        try:
            # Ex√©cuter le script AppleScript
            result = subprocess.run(['osascript', str(script_path)], 
                                  capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                print("‚úÖ Script AppleScript ex√©cut√© avec succ√®s")
                print("üõ°Ô∏è Ic√¥ne Guardian ajout√©e √† la barre de menu!")
                return True
            else:
                print(f"‚ùå Erreur script: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur lancement: {e}")
            return False
    
    def get_system_metrics(self):
        """R√©cup√®re les m√©triques syst√®me"""
        try:
            metrics = {}
            
            # Disque via df
            df_result = subprocess.run(['df', '-h', '/'], capture_output=True, text=True, timeout=5)
            if df_result.returncode == 0:
                lines = df_result.stdout.strip().split('\n')
                if len(lines) > 1:
                    fields = lines[1].split()
                    if len(fields) >= 5:
                        metrics['disk_percent'] = int(float(fields[4].replace('%', '')))
                        metrics['disk_free'] = fields[3]
            
            # M√©moire via vm_stat
            vm_result = subprocess.run(['vm_stat'], capture_output=True, text=True, timeout=5)
            if vm_result.returncode == 0:
                lines = vm_result.stdout.split('\n')
                free_pages = active_pages = 0
                
                for line in lines:
                    if 'Pages free:' in line:
                        free_pages = int(line.split()[2].replace('.', ''))
                    elif 'Pages active:' in line:
                        active_pages = int(line.split()[2].replace('.', ''))
                
                total_pages = free_pages + active_pages
                if total_pages > 0:
                    metrics['memory_percent'] = int((active_pages / total_pages) * 100)
                    metrics['memory_free_mb'] = int((free_pages * 4096) // (1024 * 1024))
            
            # CPU via uptime
            uptime_result = subprocess.run(['uptime'], capture_output=True, text=True, timeout=5)
            if uptime_result.returncode == 0:
                output = uptime_result.stdout
                if 'load averages:' in output:
                    load_avg_str = output.split('load averages:')[-1].strip().split()[0]
                    load_avg_str = load_avg_str.replace(',', '.')
                    metrics['cpu_percent'] = int(min(float(load_avg_str) * 25, 100))
            
            return metrics
            
        except Exception as e:
            print(f"‚ùå Erreur m√©triques: {e}")
            return {}
    
    def show_guardian_menu(self):
        """Affiche le menu principal Guardian"""
        metrics = self.get_system_metrics()
        
        disk_percent = metrics.get('disk_percent', 0)
        memory_percent = metrics.get('memory_percent', 0)
        cpu_percent = metrics.get('cpu_percent', 0)
        
        # D√©terminer l'ic√¥ne selon l'√©tat
        if disk_percent > 85 or memory_percent > 80:
            status_icon = "‚ö†Ô∏è"
            status_text = "Attention requise"
        elif disk_percent > 70 or memory_percent > 65:
            status_icon = "üü°"
            status_text = "Surveillance active"
        else:
            status_icon = "üõ°Ô∏è"
            status_text = "Syst√®me optimal"
        
        # Cr√©er le menu interactif
        menu_text = f"""{status_icon} MACCLEANER GUARDIAN

üìä √âTAT SYST√àME ({datetime.now().strftime('%H:%M')})
üíæ Disque: {disk_percent}% ({metrics.get('disk_free', '--')} libre)
üß† M√©moire: {memory_percent}% ({metrics.get('memory_free_mb', 0)}MB libre)
‚ö° CPU: {cpu_percent}%

{status_text}
"""
        
        if disk_percent > 80:
            menu_text += "\n‚ö†Ô∏è Espace disque faible - Nettoyage recommand√©"
        
        menu_script = f'''
        set menuText to "{menu_text}"
        set actionButtons to {{"üßπ Nettoyage Rapide", "‚ö° Optimisation", "üîÑ Actualiser", "‚öôÔ∏è Configuration", "üìä Panneau Complet", "‚ùå Quitter Guardian"}}
        
        set userChoice to choose from list actionButtons with title "üõ°Ô∏è MacCleaner Guardian" with prompt menuText default items {{"üîÑ Actualiser"}} OK button name "Ex√©cuter" cancel button name "Fermer"
        
        if userChoice is not false then
            return item 1 of userChoice
        else
            return "Fermer"
        end if
        '''
        
        try:
            result = subprocess.run(['osascript', '-e', menu_script], 
                                  capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                action = result.stdout.strip()
                self.handle_menu_action(action)
            
        except Exception as e:
            print(f"‚ùå Erreur menu: {e}")
    
    def handle_menu_action(self, action):
        """Traite l'action choisie dans le menu"""
        print(f"üéÆ Action choisie: {action}")
        
        if action == "üßπ Nettoyage Rapide":
            self.perform_cleanup()
        elif action == "‚ö° Optimisation":
            self.perform_optimization()
        elif action == "üîÑ Actualiser":
            self.show_guardian_menu()
        elif action == "‚öôÔ∏è Configuration":
            self.show_configuration()
        elif action == "üìä Panneau Complet":
            self.open_full_panel()
        elif action == "‚ùå Quitter Guardian":
            self.quit_guardian()
    
    def perform_cleanup(self):
        """Nettoyage rapide"""
        try:
            self.send_notification("üßπ Nettoyage", "D√©marrage du nettoyage...")
            
            actions = []
            
            # Vider la corbeille
            trash_path = Path.home() / '.Trash'
            if trash_path.exists():
                subprocess.run(['rm', '-rf', str(trash_path / '*')], 
                             shell=True, timeout=30, capture_output=True)
                actions.append("Corbeille vid√©e")
            
            # Nettoyer caches
            cache_paths = [
                Path.home() / 'Library/Caches/com.apple.Safari/WebKitCache',
                Path('/tmp')
            ]
            
            for cache_path in cache_paths:
                if cache_path.exists():
                    try:
                        subprocess.run([
                            'find', str(cache_path), 
                            '-type', 'f', '-mtime', '+7', 
                            '-delete'
                        ], timeout=60, capture_output=True)
                        actions.append(f"Cache {cache_path.name}")
                    except:
                        pass
            
            self.send_notification("‚úÖ Nettoyage termin√©", f"{len(actions)} optimisations appliqu√©es")
            print(f"‚úÖ Nettoyage termin√©: {actions}")
            
        except Exception as e:
            print(f"‚ùå Erreur nettoyage: {e}")
            self.send_notification("‚ùå Erreur", "Nettoyage √©chou√©")
    
    def perform_optimization(self):
        """Optimisation syst√®me"""
        try:
            self.send_notification("‚ö° Optimisation", "Optimisation en cours...")
            
            # DNS flush
            subprocess.run(['sudo', 'dscacheutil', '-flushcache'], 
                         timeout=10, capture_output=True)
            
            # Purge m√©moire
            subprocess.run(['sudo', 'purge'], timeout=30, capture_output=True)
            
            self.send_notification("‚úÖ Optimisation OK", "Syst√®me optimis√©")
            print("‚ö° Optimisation termin√©e")
            
        except Exception as e:
            print(f"‚ùå Erreur optimisation: {e}")
            self.send_notification("‚ùå Erreur", "Optimisation √©chou√©e")
    
    def show_configuration(self):
        """Affiche la configuration"""
        config_text = f"""‚öôÔ∏è CONFIGURATION GUARDIAN

üßπ Nettoyage automatique: {'‚úÖ OUI' if self.config['auto_cleanup_enabled'] else '‚ùå NON'}
üîî Notifications: {'‚úÖ OUI' if self.config['notifications_enabled'] else '‚ùå NON'}
üìä Seuil disque critique: {self.config['auto_cleanup_threshold']}%
‚è±Ô∏è Intervalle surveillance: {self.config['monitoring_interval']}s

Derni√®re v√©rification: {datetime.now().strftime('%H:%M:%S')}"""
        
        script = f'''
        display dialog "{config_text}" buttons {{"üîô Retour", "üìä Panneau Complet"}} default button "üîô Retour" with title "‚öôÔ∏è Configuration Guardian" with icon note
        '''
        
        try:
            result = subprocess.run(['osascript', '-e', script], 
                                  capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0 and "Panneau Complet" in result.stdout:
                self.open_full_panel()
        
        except Exception as e:
            print(f"‚ùå Erreur configuration: {e}")
    
    def open_full_panel(self):
        """Ouvre le panneau de contr√¥le complet"""
        try:
            subprocess.Popen(['python3', 'maccleaner_guardian.py'], 
                           cwd='/Users/loicdeloison/Desktop/MacCleaner')
            print("üìä Panneau complet ouvert")
        except Exception as e:
            print(f"‚ùå Erreur ouverture panneau: {e}")
    
    def quit_guardian(self):
        """Arr√™te le Guardian"""
        try:
            # Arr√™ter les processus Guardian
            subprocess.run(['pkill', '-f', 'quick_menubar_icon'], capture_output=True)
            subprocess.run(['pkill', '-f', 'guardian_menubar'], capture_output=True)
            
            self.send_notification("üõ°Ô∏è Guardian arr√™t√©", "Surveillance d√©sactiv√©e")
            print("üõ°Ô∏è Guardian arr√™t√©")
            self.monitoring_active = False
            
        except Exception as e:
            print(f"‚ùå Erreur arr√™t: {e}")
    
    def send_notification(self, title, message):
        """Envoie une notification macOS"""
        try:
            script = f'''
            display notification "{message}" with title "{title}" subtitle "MacCleaner Guardian"
            '''
            subprocess.run(['osascript', '-e', script], 
                         capture_output=True, timeout=5)
        except:
            pass
    
    def run_daemon_mode(self):
        """Lance en mode daemon avec surveillance continue"""
        print("üõ°Ô∏è Guardian Daemon d√©marr√© - Surveillance active")
        
        while self.monitoring_active:
            try:
                # V√©rifier l'√©tat du syst√®me
                metrics = self.get_system_metrics()
                disk_percent = metrics.get('disk_percent', 0)
                memory_percent = metrics.get('memory_percent', 0)
                
                # Alertes automatiques
                if disk_percent > 85:
                    self.send_notification(
                        "‚ö†Ô∏è Disque plein", 
                        f"Espace utilis√©: {disk_percent}% - Nettoyage recommand√©"
                    )
                elif memory_percent > 80:
                    self.send_notification(
                        "‚ö†Ô∏è M√©moire satur√©e", 
                        f"RAM utilis√©e: {memory_percent}% - Optimisation recommand√©e"
                    )
                
                # Nettoyage automatique si activ√©
                if (self.config['auto_cleanup_enabled'] and 
                    disk_percent > self.config['auto_cleanup_threshold']):
                    
                    # Demander confirmation via notification
                    script = f'''
                    display dialog "üõ°Ô∏è MacCleaner Guardian\\n\\nNettoyage automatique recommand√©\\n\\nDisque utilis√©: {disk_percent}%\\n\\nLancer le nettoyage maintenant ?" buttons {{"‚è±Ô∏è Plus tard", "üßπ Nettoyer"}} default button "üßπ Nettoyer" with title "Auto-Nettoyage" with icon caution giving up after 30
                    '''
                    
                    try:
                        result = subprocess.run(['osascript', '-e', script], 
                                              capture_output=True, text=True, timeout=35)
                        
                        if result.returncode == 0 and "Nettoyer" in result.stdout:
                            self.perform_cleanup()
                    except:
                        pass  # Timeout ou annulation
                
                # Attendre avant prochaine v√©rification
                time.sleep(self.config['monitoring_interval'])
                
            except KeyboardInterrupt:
                print("\nüõ°Ô∏è Guardian arr√™t√© par l'utilisateur")
                break
            except Exception as e:
                print(f"‚ùå Erreur daemon: {e}")
                time.sleep(60)
    
    def create_clickable_menu_bar_icon(self):
        """Cr√©e une ic√¥ne cliquable persistante dans la barre de menu"""
        
        # Script qui cr√©e une ic√¥ne persistante via notifications programm√©es
        persistent_script = '''
        on run
            -- Cr√©er un processus en arri√®re-plan qui maintient l'ic√¥ne
            repeat
                try
                    -- V√©rifier si Guardian est encore actif
                    set guardianCheck to do shell script "pgrep -f 'quick_menubar_icon.*daemon'"
                    
                    -- Si Guardian actif, cr√©er/maintenir l'ic√¥ne
                    if guardianCheck is not "" then
                        -- Notification discr√®te qui simule une ic√¥ne
                        display notification "üõ°Ô∏è Guardian actif - Cliquez pour menu" with title "Guardian" subtitle "" sound name ""
                        
                        -- Attendre 5 minutes avant la prochaine "ic√¥ne"
                        delay 300
                    else
                        -- Guardian arr√™t√©, sortir de la boucle
                        exit repeat
                    end if
                    
                on error
                    -- En cas d'erreur, attendre et r√©essayer
                    delay 60
                end try
            end repeat
        end run
        '''
        
        # Sauvegarder et lancer le script persistant
        persistent_path = Path('/Users/loicdeloison/Desktop/MacCleaner/guardian_persistent_icon.scpt')
        with open(persistent_path, 'w') as f:
            f.write(persistent_script)
        
        # Lancer le script en arri√®re-plan
        try:
            subprocess.Popen(['osascript', str(persistent_path)], 
                           cwd='/Users/loicdeloison/Desktop/MacCleaner')
            print("üõ°Ô∏è Ic√¥ne persistante cr√©√©e")
            return True
        except Exception as e:
            print(f"‚ùå Erreur ic√¥ne persistante: {e}")
            return False

def main():
    """Point d'entr√©e principal"""
    import sys
    
    guardian = QuickMenuBarIcon()
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == '--daemon':
            # Mode daemon - surveillance continue
            guardian.run_daemon_mode()
        
        elif command == '--menu':
            # Afficher le menu Guardian
            guardian.show_guardian_menu()
        
        elif command == '--app-mode':
            # Mode application - cr√©er l'ic√¥ne et lancer daemon
            guardian.create_clickable_menu_bar_icon()
            guardian.run_daemon_mode()
        
        elif command == '--install':
            # Installation de l'ic√¥ne
            if guardian.launch_menu_bar_icon():
                print("‚úÖ Installation r√©ussie!")
            else:
                print("‚ùå Erreur installation")
        
        return
    
    # Mode par d√©faut - installer l'ic√¥ne
    guardian.launch_menu_bar_icon()

if __name__ == "__main__":
    main()