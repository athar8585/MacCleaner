#!/usr/bin/env python3
"""
MacCleaner Pro v3.0 - Interface moderne iOS 26 avec IA Copilot int√©gr√©
Design moderne, surveillance autonome et assistant IA intelligent
"""

import os
import sys
import time
import json
import threading
import subprocess
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import sqlite3
from datetime import datetime, timedelta
import psutil
import requests
from autonomous_cleaner import AutonomousCleanerAgent

class ModernMacCleanerPro:
    def __init__(self):
        # Initialiser l'agent autonome
        self.autonomous_agent = AutonomousCleanerAgent()
        
        # Interface moderne
        self.root = tk.Tk()
        self.setup_modern_ui()
        
        # IA Copilot int√©gr√©
        self.copilot_active = False
        self.setup_copilot_ai()
        
        # Variables d'√©tat
        self.cleaning_active = False
        self.total_freed_space = 0
        self.current_task = "Pr√™t"
        
    def setup_modern_ui(self):
        """Configuration de l'interface moderne iOS 26 style"""
        self.root.title("MacCleaner Pro 3.0 - Intelligence Autonome")
        self.root.geometry("1200x800")
        
        # Couleurs modernes iOS 26
        self.colors = {
            'primary': '#007AFF',      # Bleu syst√®me iOS
            'secondary': '#5856D6',    # Violet syst√®me
            'success': '#34C759',      # Vert syst√®me
            'warning': '#FF9500',      # Orange syst√®me
            'danger': '#FF3B30',       # Rouge syst√®me
            'background': '#F2F2F7',   # Gris clair syst√®me
            'surface': '#FFFFFF',      # Blanc
            'text_primary': '#000000', # Noir
            'text_secondary': '#6D6D80', # Gris moyen
            'accent': '#AF52DE'        # Violet accent
        }
        
        # Configuration du style moderne
        self.root.configure(bg=self.colors['background'])
        
        # Style ttk moderne
        style = ttk.Style()
        style.theme_use('clam')
        
        # Styles personnalis√©s iOS 26
        style.configure('Modern.TFrame', background=self.colors['surface'], relief='flat', borderwidth=0)
        style.configure('Card.TFrame', background=self.colors['surface'], relief='solid', borderwidth=1)
        style.configure('Primary.TButton', 
                       background=self.colors['primary'], 
                       foreground='white',
                       borderwidth=0,
                       focuscolor='none',
                       padding=(20, 10))
        style.map('Primary.TButton',
                 background=[('active', '#0056CC'), ('pressed', '#004AAA')])
        
        # Interface principale
        self.create_modern_interface()
        
    def create_modern_interface(self):
        """Cr√©er l'interface moderne"""
        # Frame principal avec padding moderne
        main_container = ttk.Frame(self.root, style='Modern.TFrame', padding="20")
        main_container.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Header moderne avec titre et statut
        self.create_modern_header(main_container)
        
        # Dashboard avec cartes de statut
        self.create_dashboard_cards(main_container)
        
        # Section IA Copilot
        self.create_copilot_section(main_container)
        
        # Contr√¥les principaux
        self.create_main_controls(main_container)
        
        # Zone de logs moderne
        self.create_modern_logs(main_container)
        
        # Configuration responsive
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_container.columnconfigure(1, weight=1)
        
    def create_modern_header(self, parent):
        """Cr√©er l'en-t√™te moderne"""
        header_frame = ttk.Frame(parent, style='Modern.TFrame')
        header_frame.grid(row=0, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 30))
        
        # Titre principal avec ic√¥ne
        title_frame = ttk.Frame(header_frame, style='Modern.TFrame')
        title_frame.grid(row=0, column=0, sticky=tk.W)
        
        title_label = ttk.Label(title_frame, text="üßπ MacCleaner Pro 3.0", 
                               font=('SF Pro Display', 28, 'bold'),
                               foreground=self.colors['primary'])
        title_label.grid(row=0, column=0)
        
        subtitle_label = ttk.Label(title_frame, text="Intelligence Autonome ‚Ä¢ Protection IA ‚Ä¢ Design iOS 26", 
                                  font=('SF Pro Text', 12),
                                  foreground=self.colors['text_secondary'])
        subtitle_label.grid(row=1, column=0, sticky=tk.W)
        
        # Indicateur de statut en temps r√©el
        self.status_frame = ttk.Frame(header_frame, style='Modern.TFrame')
        self.status_frame.grid(row=0, column=1, sticky=tk.E)
        
        self.status_indicator = ttk.Label(self.status_frame, text="‚óè", 
                                         font=('SF Pro Display', 16),
                                         foreground=self.colors['success'])
        self.status_indicator.grid(row=0, column=0)
        
        self.status_text = ttk.Label(self.status_frame, text="Syst√®me Optimal", 
                                    font=('SF Pro Text', 12, 'bold'),
                                    foreground=self.colors['text_primary'])
        self.status_text.grid(row=0, column=1, padx=(5, 0))
        
        header_frame.columnconfigure(1, weight=1)
        
    def create_dashboard_cards(self, parent):
        """Cr√©er les cartes de tableau de bord"""
        dashboard_frame = ttk.Frame(parent, style='Modern.TFrame')
        dashboard_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 20))
        
        # Carte Performance Syst√®me
        system_card = self.create_info_card(dashboard_frame, "Performance Syst√®me", 0, 0)
        self.system_info_label = ttk.Label(system_card, text="Chargement...", 
                                          font=('SF Pro Text', 11),
                                          foreground=self.colors['text_secondary'])
        self.system_info_label.grid(row=1, column=0, sticky=tk.W, pady=5)
        
        # Carte Protection IA
        protection_card = self.create_info_card(dashboard_frame, "Protection IA", 0, 1)
        self.protection_info_label = ttk.Label(protection_card, text="üõ°Ô∏è Actif\nüîç Surveillance continue\n‚òÅÔ∏è Protection iCloud", 
                                              font=('SF Pro Text', 11),
                                              foreground=self.colors['text_secondary'])
        self.protection_info_label.grid(row=1, column=0, sticky=tk.W, pady=5)
        
        # Carte Nettoyage R√©cent
        cleaning_card = self.create_info_card(dashboard_frame, "Derniers Nettoyages", 0, 2)
        self.cleaning_info_label = ttk.Label(cleaning_card, text="Aucun nettoyage r√©cent", 
                                            font=('SF Pro Text', 11),
                                            foreground=self.colors['text_secondary'])
        self.cleaning_info_label.grid(row=1, column=0, sticky=tk.W, pady=5)
        
        # Configuration responsive des cartes
        for i in range(3):
            dashboard_frame.columnconfigure(i, weight=1)
            
    def create_info_card(self, parent, title, row, col):
        """Cr√©er une carte d'information moderne"""
        card_frame = ttk.Frame(parent, style='Card.TFrame', padding="15")
        card_frame.grid(row=row, column=col, sticky=(tk.W, tk.E, tk.N, tk.S), padx=10, pady=5)
        
        # Titre de la carte
        title_label = ttk.Label(card_frame, text=title, 
                               font=('SF Pro Text', 14, 'bold'),
                               foreground=self.colors['text_primary'])
        title_label.grid(row=0, column=0, sticky=tk.W)
        
        return card_frame
        
    def create_copilot_section(self, parent):
        """Cr√©er la section IA Copilot"""
        copilot_frame = ttk.LabelFrame(parent, text="ü§ñ Assistant IA Copilot", 
                                      style='Card.TFrame', padding="15")
        copilot_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 20))
        
        # Interface de chat avec IA
        chat_frame = ttk.Frame(copilot_frame, style='Modern.TFrame')
        chat_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # Zone de conversation
        self.copilot_chat = scrolledtext.ScrolledText(chat_frame, height=8, width=80,
                                                     font=('SF Mono', 11),
                                                     bg=self.colors['background'],
                                                     fg=self.colors['text_primary'],
                                                     relief='flat',
                                                     borderwidth=1)
        self.copilot_chat.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # Message d'accueil
        welcome_msg = """ü§ñ Copilot IA: Bonjour ! Je suis votre assistant intelligent MacCleaner Pro.

Je peux vous aider √† :
‚Ä¢ üîç Analyser l'√©tat de votre Mac en temps r√©el
‚Ä¢ üßπ Recommander des nettoyages personnalis√©s
‚Ä¢ üõ°Ô∏è Surveiller les menaces de s√©curit√©
‚Ä¢ üìä Interpr√©ter les m√©triques de performance
‚Ä¢ ‚öôÔ∏è Optimiser les param√®tres automatiques

Tapez votre question ou dites 'aide' pour plus d'options...
"""
        self.copilot_chat.insert(tk.END, welcome_msg)
        
        # Zone de saisie moderne
        input_frame = ttk.Frame(chat_frame, style='Modern.TFrame')
        input_frame.grid(row=1, column=0, sticky=(tk.W, tk.E))
        
        self.copilot_input = ttk.Entry(input_frame, font=('SF Pro Text', 12),
                                      width=60)
        self.copilot_input.grid(row=0, column=0, sticky=(tk.W, tk.E), padx=(0, 10))
        self.copilot_input.bind('<Return>', self.send_copilot_message)
        
        send_button = ttk.Button(input_frame, text="Envoyer", 
                               style='Primary.TButton',
                               command=self.send_copilot_message)
        send_button.grid(row=0, column=1)
        
        # Boutons d'action rapide
        quick_actions_frame = ttk.Frame(copilot_frame, style='Modern.TFrame')
        quick_actions_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(10, 0))
        
        quick_buttons = [
            ("üîç Analyser Syst√®me", self.copilot_analyze_system),
            ("üßπ Nettoyage Recommand√©", self.copilot_recommend_cleaning),
            ("üõ°Ô∏è Rapport S√©curit√©", self.copilot_security_report),
            ("üìä M√©triques Performance", self.copilot_performance_metrics)
        ]
        
        for i, (text, command) in enumerate(quick_buttons):
            btn = ttk.Button(quick_actions_frame, text=text, command=command)
            btn.grid(row=0, column=i, padx=5)
            
        chat_frame.columnconfigure(0, weight=1)
        input_frame.columnconfigure(0, weight=1)
        
    def create_main_controls(self, parent):
        """Cr√©er les contr√¥les principaux"""
        controls_frame = ttk.Frame(parent, style='Modern.TFrame')
        controls_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 20))
        
        # Mode de fonctionnement
        mode_frame = ttk.LabelFrame(controls_frame, text="Mode de Fonctionnement", padding="10")
        mode_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 10))
        
        self.operation_mode = tk.StringVar(value="autonomous")
        
        mode_options = [
            ("ü§ñ Autonome (Recommand√©)", "autonomous"),
            ("üîç Analyse Seulement", "analyze"),
            ("üßπ Nettoyage Manuel", "manual"),
            ("üõ°Ô∏è Protection Seulement", "protection")
        ]
        
        for i, (text, value) in enumerate(mode_options):
            ttk.Radiobutton(mode_frame, text=text, variable=self.operation_mode, 
                           value=value).grid(row=i, column=0, sticky=tk.W, pady=2)
            
        # Param√®tres autonomes
        autonomous_frame = ttk.LabelFrame(controls_frame, text="Param√®tres Autonomes", padding="10")
        autonomous_frame.grid(row=0, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=10)
        
        # Seuils automatiques
        ttk.Label(autonomous_frame, text="Seuil disque (%)").grid(row=0, column=0, sticky=tk.W)
        self.disk_threshold = tk.Scale(autonomous_frame, from_=70, to=95, orient=tk.HORIZONTAL)
        self.disk_threshold.set(85)
        self.disk_threshold.grid(row=0, column=1, sticky=(tk.W, tk.E))
        
        ttk.Label(autonomous_frame, text="Seuil m√©moire (%)").grid(row=1, column=0, sticky=tk.W)
        self.memory_threshold = tk.Scale(autonomous_frame, from_=60, to=90, orient=tk.HORIZONTAL)
        self.memory_threshold.set(80)
        self.memory_threshold.grid(row=1, column=1, sticky=(tk.W, tk.E))
        
        # Protection avanc√©e
        protection_frame = ttk.LabelFrame(controls_frame, text="Protection Avanc√©e", padding="10")
        protection_frame.grid(row=0, column=2, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(10, 0))
        
        self.icloud_protection = tk.BooleanVar(value=True)
        self.realtime_protection = tk.BooleanVar(value=True)
        self.auto_quarantine = tk.BooleanVar(value=True)
        
        ttk.Checkbutton(protection_frame, text="üîí Protection iCloud", 
                       variable=self.icloud_protection).grid(row=0, column=0, sticky=tk.W)
        ttk.Checkbutton(protection_frame, text="üõ°Ô∏è Protection Temps R√©el", 
                       variable=self.realtime_protection).grid(row=1, column=0, sticky=tk.W)
        ttk.Checkbutton(protection_frame, text="üîí Quarantaine Auto", 
                       variable=self.auto_quarantine).grid(row=2, column=0, sticky=tk.W)
        
        # Configuration responsive
        for i in range(3):
            controls_frame.columnconfigure(i, weight=1)
            
    def create_modern_logs(self, parent):
        """Cr√©er la zone de logs moderne"""
        logs_frame = ttk.LabelFrame(parent, text="Activit√© en Temps R√©el", padding="10")
        logs_frame.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Zone de logs avec style moderne
        self.log_text = scrolledtext.ScrolledText(logs_frame, height=12, 
                                                 font=('SF Mono', 10),
                                                 bg=self.colors['background'],
                                                 fg=self.colors['text_primary'],
                                                 relief='flat',
                                                 borderwidth=1)
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Boutons de contr√¥le des logs
        log_controls = ttk.Frame(logs_frame, style='Modern.TFrame')
        log_controls.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(10, 0))
        
        ttk.Button(log_controls, text="üóëÔ∏è Effacer", 
                  command=self.clear_logs).grid(row=0, column=0, padx=(0, 10))
        ttk.Button(log_controls, text="üíæ Sauvegarder", 
                  command=self.save_logs).grid(row=0, column=1, padx=(0, 10))
        ttk.Button(log_controls, text="üìä Exporter Rapport", 
                  command=self.export_report).grid(row=0, column=2)
        
        logs_frame.columnconfigure(0, weight=1)
        logs_frame.rowconfigure(0, weight=1)
        
        # Actions principales
        actions_frame = ttk.Frame(parent, style='Modern.TFrame')
        actions_frame.grid(row=5, column=0, columnspan=3, pady=20)
        
        # Boutons d'action principaux
        main_buttons = [
            ("üöÄ D√©marrer Agent Autonome", self.start_autonomous_mode, 'Primary.TButton'),
            ("üîç Scan Complet", self.start_full_scan, 'Primary.TButton'),
            ("üßπ Nettoyage Manuel", self.start_manual_cleaning, 'Primary.TButton'),
            ("‚öôÔ∏è Param√®tres Avanc√©s", self.open_advanced_settings, None)
        ]
        
        for i, (text, command, style) in enumerate(main_buttons):
            btn = ttk.Button(actions_frame, text=text, command=command)
            if style:
                btn.configure(style=style)
            btn.grid(row=0, column=i, padx=10)
            
    def setup_copilot_ai(self):
        """Configuration de l'IA Copilot"""
        self.copilot_context = {
            'system_data': {},
            'user_preferences': {},
            'conversation_history': []
        }
        
        # D√©marrer la mise √† jour des donn√©es en temps r√©el
        self.update_system_data()
        self.schedule_data_updates()
        
    def send_copilot_message(self, event=None):
        """Envoyer un message au Copilot IA"""
        user_message = self.copilot_input.get().strip()
        if not user_message:
            return
            
        # Afficher le message utilisateur
        self.copilot_chat.insert(tk.END, f"\nüë§ Vous: {user_message}\n")
        self.copilot_input.delete(0, tk.END)
        
        # Traiter la demande
        response = self.process_copilot_query(user_message)
        
        # Afficher la r√©ponse
        self.copilot_chat.insert(tk.END, f"ü§ñ Copilot: {response}\n")
        self.copilot_chat.see(tk.END)
        
    def process_copilot_query(self, query):
        """Traiter une requ√™te du Copilot IA"""
        query_lower = query.lower()
        
        # Commandes d'aide
        if 'aide' in query_lower or 'help' in query_lower:
            return self.get_help_response()
            
        # Analyse syst√®me
        elif any(word in query_lower for word in ['syst√®me', 'performance', '√©tat', 'analyse']):
            return self.copilot_analyze_system_response()
            
        # Nettoyage
        elif any(word in query_lower for word in ['nettoyer', 'nettoyage', 'clean', 'lib√©rer']):
            return self.copilot_cleaning_response()
            
        # S√©curit√©
        elif any(word in query_lower for word in ['s√©curit√©', 'malware', 'virus', 'menace']):
            return self.copilot_security_response()
            
        # Optimisation
        elif any(word in query_lower for word in ['optimiser', 'optimisation', 'acc√©l√©rer', 'performance']):
            return self.copilot_optimization_response()
            
        # Espace disque
        elif any(word in query_lower for word in ['espace', 'disque', 'stockage', 'm√©moire']):
            return self.copilot_storage_response()
            
        # R√©ponse par d√©faut avec suggestions
        else:
            return f"""Je ne suis pas s√ªr de comprendre "{query}".

Essayez ces commandes :
‚Ä¢ "analyser syst√®me" - √âtat complet du Mac
‚Ä¢ "nettoyer maintenant" - Recommandations de nettoyage
‚Ä¢ "rapport s√©curit√©" - Statut de protection
‚Ä¢ "optimiser performance" - Conseils d'am√©lioration
‚Ä¢ "espace disque" - Analyse du stockage

Ou tapez "aide" pour plus d'options."""

    def copilot_analyze_system_response(self):
        """R√©ponse d'analyse syst√®me du Copilot"""
        try:
            # R√©cup√©rer les donn√©es syst√®me actuelles
            cpu_usage = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            # R√©cup√©rer le rapport de l'agent autonome
            status_report = self.autonomous_agent.get_status_report()
            
            analysis = f"""üìä ANALYSE SYST√àME COMPL√àTE

üñ•Ô∏è **Performance Actuelle:**
‚Ä¢ Processeur: {cpu_usage:.1f}% d'utilisation
‚Ä¢ M√©moire: {memory.percent:.1f}% utilis√©e ({memory.available / (1024**3):.1f}GB libre)
‚Ä¢ Disque: {(disk.used / disk.total) * 100:.1f}% utilis√© ({disk.free / (1024**3):.1f}GB libre)

üè• **√âtat de Sant√©:**"""

            # Analyse intelligente
            if cpu_usage > 80:
                analysis += "\n‚ö†Ô∏è Processeur tr√®s sollicit√© - Recommande nettoyage des processus"
            elif cpu_usage > 60:
                analysis += "\nüü° Processeur mod√©r√©ment charg√©"
            else:
                analysis += "\n‚úÖ Processeur en bon √©tat"
                
            if memory.percent > 85:
                analysis += "\nüî¥ M√©moire critique - Nettoyage urgent recommand√©"
            elif memory.percent > 70:
                analysis += "\nüü° M√©moire charg√©e - Nettoyage conseill√©"
            else:
                analysis += "\n‚úÖ M√©moire en bon √©tat"
                
            if (disk.used / disk.total) * 100 > 90:
                analysis += "\nüî¥ Espace disque critique - Action imm√©diate requise"
            elif (disk.used / disk.total) * 100 > 80:
                analysis += "\nüü° Espace disque faible - Nettoyage recommand√©"
            else:
                analysis += "\n‚úÖ Espace disque suffisant"
                
            # Recommandations
            analysis += "\n\nüí° **Recommandations:**"
            
            if status_report.get('cleaning_performance', {}).get('cleanings_last_week', 0) == 0:
                analysis += "\n‚Ä¢ Aucun nettoyage r√©cent - Lancez un nettoyage complet"
                
            if memory.percent > 70:
                analysis += "\n‚Ä¢ Red√©marrez les applications gourmandes"
                
            if (disk.used / disk.total) * 100 > 80:
                analysis += "\n‚Ä¢ Nettoyez les fichiers temporaires et caches"
                
            analysis += "\n\nTapez 'nettoyer maintenant' pour d√©marrer l'optimisation automatique."
            
            return analysis
            
        except Exception as e:
            return f"‚ùå Erreur lors de l'analyse syst√®me: {str(e)}"
            
    def copilot_cleaning_response(self):
        """R√©ponse de nettoyage du Copilot"""
        return """üßπ RECOMMANDATIONS DE NETTOYAGE INTELLIGENT

üéØ **Actions Recommand√©es:**
‚Ä¢ Nettoyage des caches syst√®me (s√ªr)
‚Ä¢ Suppression des fichiers temporaires
‚Ä¢ Vidage de la corbeille
‚Ä¢ Optimisation de la m√©moire

üîí **Protections Actives:**
‚Ä¢ Fichiers iCloud automatiquement prot√©g√©s
‚Ä¢ Documents importants pr√©serv√©s
‚Ä¢ Fichiers r√©cents sauvegard√©s

‚ö° **Gains Estim√©s:**
‚Ä¢ 2-8 GB d'espace disque
‚Ä¢ 15-30% d'am√©lioration performance
‚Ä¢ D√©marrage plus rapide

Voulez-vous que je lance le nettoyage automatique maintenant ?
Tapez 'oui nettoyer' pour confirmer."""

    def copilot_security_response(self):
        """R√©ponse s√©curit√© du Copilot"""
        try:
            # V√©rifier les derni√®res d√©tections
            conn = sqlite3.connect(self.autonomous_agent.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT COUNT(*) FROM malware_detections 
                WHERE timestamp > datetime('now', '-24 hours')
            ''')
            recent_threats = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM malware_detections')
            total_threats = cursor.fetchone()[0]
            
            conn.close()
            
            security_status = f"""üõ°Ô∏è RAPPORT S√âCURIT√â COMPLET

üìä **Statut Actuel:**
‚Ä¢ Protection temps r√©el: {'üü¢ ACTIVE' if self.realtime_protection.get() else 'üî¥ INACTIVE'}
‚Ä¢ D√©tections 24h: {recent_threats} menaces
‚Ä¢ Total d√©tections: {total_threats} menaces
‚Ä¢ Quarantaine: {'üü¢ ACTIVE' if self.auto_quarantine.get() else 'üî¥ INACTIVE'}

üîç **Derni√®re Analyse:**
‚Ä¢ Base de signatures: √Ä jour
‚Ä¢ Surveillance iCloud: Active
‚Ä¢ Protection t√©l√©chargements: Active

‚úÖ **Recommandations:**"""

            if recent_threats > 0:
                security_status += f"\n‚ö†Ô∏è {recent_threats} menaces d√©tect√©es r√©cemment - V√©rifiez la quarantaine"
            else:
                security_status += "\n‚úÖ Aucune menace r√©cente d√©tect√©e"
                
            if not self.realtime_protection.get():
                security_status += "\nüîß Activez la protection temps r√©el pour une s√©curit√© maximale"
                
            security_status += "\n\nVotre syst√®me est prot√©g√© par une surveillance intelligente continue."
            
            return security_status
            
        except Exception as e:
            return f"‚ùå Erreur lors de l'analyse s√©curit√©: {str(e)}"
            
    def get_help_response(self):
        """R√©ponse d'aide du Copilot"""
        return """ü§ñ AIDE COPILOT IA - MacCleaner Pro 3.0

üìã **Commandes Disponibles:**

üîç **Analyse & Diagnostic:**
‚Ä¢ "analyser syst√®me" - √âtat complet du Mac
‚Ä¢ "rapport performance" - M√©triques d√©taill√©es
‚Ä¢ "espace disque" - Analyse du stockage

üßπ **Nettoyage & Optimisation:**
‚Ä¢ "nettoyer maintenant" - Nettoyage automatique
‚Ä¢ "optimiser performance" - Conseils d'am√©lioration
‚Ä¢ "lib√©rer espace" - Recommandations de stockage

üõ°Ô∏è **S√©curit√© & Protection:**
‚Ä¢ "rapport s√©curit√©" - Statut protection
‚Ä¢ "scan malware" - Analyse des menaces
‚Ä¢ "v√©rifier quarantaine" - Fichiers suspects

‚öôÔ∏è **Configuration:**
‚Ä¢ "param√®tres autonome" - R√©glages auto
‚Ä¢ "seuils surveillance" - Limites d√©clenchement
‚Ä¢ "historique nettoyage" - Derni√®res actions

üí¨ **Communication Naturelle:**
Vous pouvez aussi me parler naturellement :
‚Ä¢ "Mon Mac est lent"
‚Ä¢ "J'ai besoin d'espace"
‚Ä¢ "Est-ce que tout va bien ?"

Je comprends le fran√ßais et je m'adapte √† votre style !"""

    def copilot_analyze_system(self):
        """Action rapide - Analyser syst√®me"""
        response = self.copilot_analyze_system_response()
        self.copilot_chat.insert(tk.END, f"\nü§ñ Copilot: {response}\n")
        self.copilot_chat.see(tk.END)
        
    def copilot_recommend_cleaning(self):
        """Action rapide - Recommander nettoyage"""
        response = self.copilot_cleaning_response()
        self.copilot_chat.insert(tk.END, f"\nü§ñ Copilot: {response}\n")
        self.copilot_chat.see(tk.END)
        
    def copilot_security_report(self):
        """Action rapide - Rapport s√©curit√©"""
        response = self.copilot_security_response()
        self.copilot_chat.insert(tk.END, f"\nü§ñ Copilot: {response}\n")
        self.copilot_chat.see(tk.END)
        
    def copilot_performance_metrics(self):
        """Action rapide - M√©triques performance"""
        try:
            status_report = self.autonomous_agent.get_status_report()
            
            metrics = f"""üìä M√âTRIQUES PERFORMANCE D√âTAILL√âES

üèÉ‚Äç‚ôÇÔ∏è **Performance Actuelle:**
‚Ä¢ CPU: {status_report.get('system_health', {}).get('cpu_usage', 0):.1f}%
‚Ä¢ RAM: {status_report.get('system_health', {}).get('memory_usage', 0):.1f}%
‚Ä¢ Disque: {status_report.get('system_health', {}).get('disk_usage', 0):.1f}%

üìà **Historique (7 derniers jours):**
‚Ä¢ Nettoyages: {status_report.get('cleaning_performance', {}).get('cleanings_last_week', 0)}
‚Ä¢ Espace lib√©r√©: {status_report.get('cleaning_performance', {}).get('space_freed_mb', 0):.1f} MB
‚Ä¢ Temps moyen: {status_report.get('cleaning_performance', {}).get('avg_duration_seconds', 0):.1f}s

üõ°Ô∏è **S√©curit√©:**
‚Ä¢ Menaces d√©tect√©es: {status_report.get('security', {}).get('threats_detected_last_week', 0)}
‚Ä¢ Protection: {'Active' if status_report.get('security', {}).get('protection_active', False) else 'Inactive'}

üéØ **Recommandations:**
Bas√©es sur l'analyse de vos habitudes d'utilisation."""
            
            self.copilot_chat.insert(tk.END, f"\nü§ñ Copilot: {metrics}\n")
            
        except Exception as e:
            self.copilot_chat.insert(tk.END, f"\nü§ñ Copilot: ‚ùå Erreur m√©triques: {str(e)}\n")
            
        self.copilot_chat.see(tk.END)
        
    def update_system_data(self):
        """Mettre √† jour les donn√©es syst√®me en temps r√©el"""
        try:
            # M√©triques syst√®me
            cpu_usage = psutil.cpu_percent()
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            # Mettre √† jour l'interface
            system_text = f"""üíæ Disque: {(disk.used / disk.total) * 100:.1f}% utilis√©
üß† RAM: {memory.percent:.1f}% utilis√©e  
‚ö° CPU: {cpu_usage:.1f}% d'utilisation
üîã Processus: {len(psutil.pids())} actifs"""
            
            self.system_info_label.configure(text=system_text)
            
            # Mettre √† jour le statut g√©n√©ral
            if cpu_usage > 80 or memory.percent > 85 or (disk.used / disk.total) * 100 > 90:
                self.status_indicator.configure(foreground=self.colors['warning'])
                self.status_text.configure(text="Attention Requise")
            elif cpu_usage > 60 or memory.percent > 70 or (disk.used / disk.total) * 100 > 80:
                self.status_indicator.configure(foreground=self.colors['warning'])
                self.status_text.configure(text="Optimisation Sugg√©r√©e")
            else:
                self.status_indicator.configure(foreground=self.colors['success'])
                self.status_text.configure(text="Syst√®me Optimal")
                
        except Exception as e:
            self.log_message(f"Erreur mise √† jour donn√©es: {str(e)}")
            
    def schedule_data_updates(self):
        """Programmer les mises √† jour des donn√©es"""
        def update_loop():
            while True:
                try:
                    self.update_system_data()
                    time.sleep(5)  # Mise √† jour toutes les 5 secondes
                except Exception as e:
                    print(f"Erreur update loop: {str(e)}")
                    time.sleep(30)
                    
        update_thread = threading.Thread(target=update_loop, daemon=True)
        update_thread.start()
        
    def log_message(self, message):
        """Ajouter un message au log avec timestamp"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}\n"
        
        self.log_text.insert(tk.END, formatted_message)
        self.log_text.see(tk.END)
        self.root.update_idletasks()
        
    def clear_logs(self):
        """Effacer les logs"""
        self.log_text.delete(1.0, tk.END)
        
    def save_logs(self):
        """Sauvegarder les logs"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            log_file = f"MacCleaner_logs_{timestamp}.txt"
            
            with open(log_file, 'w') as f:
                f.write(self.log_text.get(1.0, tk.END))
                
            self.log_message(f"‚úÖ Logs sauvegard√©s: {log_file}")
            
        except Exception as e:
            self.log_message(f"‚ùå Erreur sauvegarde logs: {str(e)}")
            
    def export_report(self):
        """Exporter un rapport complet"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            report_file = f"MacCleaner_rapport_{timestamp}.json"
            
            # G√©n√©rer le rapport complet
            status_report = self.autonomous_agent.get_status_report()
            
            with open(report_file, 'w') as f:
                json.dump(status_report, f, indent=2)
                
            self.log_message(f"üìä Rapport export√©: {report_file}")
            
        except Exception as e:
            self.log_message(f"‚ùå Erreur export rapport: {str(e)}")
            
    def start_autonomous_mode(self):
        """D√©marrer le mode autonome"""
        try:
            # Mettre √† jour la configuration de l'agent
            self.autonomous_agent.config['auto_clean_threshold']['disk_usage_percent'] = self.disk_threshold.get()
            self.autonomous_agent.config['auto_clean_threshold']['memory_usage_percent'] = self.memory_threshold.get()
            
            self.log_message("ü§ñ Mode autonome activ√© - Surveillance continue d√©marr√©e")
            self.log_message(f"üìä Seuils: Disque {self.disk_threshold.get()}%, M√©moire {self.memory_threshold.get()}%")
            
            # D√©marrer la surveillance en arri√®re-plan
            if not hasattr(self, 'autonomous_thread') or not self.autonomous_thread.is_alive():
                self.autonomous_thread = threading.Thread(target=self.autonomous_monitoring, daemon=True)
                self.autonomous_thread.start()
                
        except Exception as e:
            self.log_message(f"‚ùå Erreur d√©marrage mode autonome: {str(e)}")
            
    def autonomous_monitoring(self):
        """Surveillance autonome en arri√®re-plan"""
        while True:
            try:
                # V√©rifier les seuils
                disk_usage = psutil.disk_usage('/')
                disk_percent = (disk_usage.used / disk_usage.total) * 100
                memory_percent = psutil.virtual_memory().percent
                
                # Log p√©riodique du statut
                if int(time.time()) % 300 == 0:  # Toutes les 5 minutes
                    self.log_message(f"ü§ñ Surveillance: Disque {disk_percent:.1f}%, RAM {memory_percent:.1f}%")
                    
                time.sleep(30)
                
            except Exception as e:
                self.log_message(f"‚ùå Erreur surveillance: {str(e)}")
                time.sleep(60)
                
    def start_full_scan(self):
        """D√©marrer un scan complet"""
        self.log_message("üîç D√©marrage du scan complet...")
        
        def scan_thread():
            try:
                # Scanner le syst√®me
                self.autonomous_agent.scan_malware()
                
                # Analyser l'espace disque
                large_files = self.find_large_files()
                
                self.log_message(f"‚úÖ Scan termin√© - {len(large_files)} gros fichiers trouv√©s")
                
            except Exception as e:
                self.log_message(f"‚ùå Erreur scan: {str(e)}")
                
        threading.Thread(target=scan_thread, daemon=True).start()
        
    def find_large_files(self):
        """Trouver les fichiers volumineux"""
        large_files = []
        search_paths = [
            os.path.expanduser('~/Downloads'),
            os.path.expanduser('~/Desktop'),
            os.path.expanduser('~/Documents')
        ]
        
        min_size_bytes = 100 * 1024 * 1024  # 100 MB
        
        for search_path in search_paths:
            if os.path.exists(search_path):
                try:
                    for root, dirs, files in os.walk(search_path):
                        for file in files:
                            filepath = os.path.join(root, file)
                            try:
                                if os.path.getsize(filepath) > min_size_bytes:
                                    large_files.append(filepath)
                                    if len(large_files) >= 20:  # Limiter √† 20 fichiers
                                        return large_files
                            except (OSError, IOError):
                                continue
                except (OSError, IOError):
                    continue
                    
        return large_files
        
    def start_manual_cleaning(self):
        """D√©marrer un nettoyage manuel"""
        self.log_message("üßπ D√©marrage du nettoyage manuel...")
        
        def cleaning_thread():
            try:
                # Utiliser l'agent autonome pour le nettoyage
                self.autonomous_agent.trigger_autonomous_cleaning('manual', ['Nettoyage manuel demand√©'])
                self.log_message("‚úÖ Nettoyage manuel termin√©")
                
            except Exception as e:
                self.log_message(f"‚ùå Erreur nettoyage: {str(e)}")
                
        threading.Thread(target=cleaning_thread, daemon=True).start()
        
    def open_advanced_settings(self):
        """Ouvrir les param√®tres avanc√©s"""
        # Cr√©er une fen√™tre de param√®tres avanc√©s
        settings_window = tk.Toplevel(self.root)
        settings_window.title("Param√®tres Avanc√©s")
        settings_window.geometry("600x400")
        settings_window.configure(bg=self.colors['background'])
        
        # Interface des param√®tres avanc√©s
        settings_frame = ttk.Frame(settings_window, padding="20")
        settings_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        ttk.Label(settings_frame, text="‚öôÔ∏è Param√®tres Avanc√©s", 
                 font=('SF Pro Display', 18, 'bold')).grid(row=0, column=0, columnspan=2, pady=(0, 20))
        
        # Options avanc√©es
        advanced_options = [
            ("Protection temps r√©el", self.realtime_protection),
            ("Quarantaine automatique", self.auto_quarantine),
            ("Protection iCloud", self.icloud_protection)
        ]
        
        for i, (text, var) in enumerate(advanced_options):
            ttk.Checkbutton(settings_frame, text=text, variable=var).grid(
                row=i+1, column=0, sticky=tk.W, pady=5)
        
        settings_window.columnconfigure(0, weight=1)
        settings_window.rowconfigure(0, weight=1)
        settings_frame.columnconfigure(1, weight=1)
        
    def run(self):
        """Lancer l'application"""
        # Message de bienvenue
        welcome_msg = """üöÄ MacCleaner Pro 3.0 - Intelligence Autonome D√©marr√©e

‚ú® Nouvelles fonctionnalit√©s:
‚Ä¢ ü§ñ IA Copilot int√©gr√©e pour assistance intelligente
‚Ä¢ üõ°Ô∏è Protection temps r√©el contre les malwares
‚Ä¢ üìä Surveillance autonome avec seuils personnalisables
‚Ä¢ üé® Interface moderne iOS 26
‚Ä¢ ‚òÅÔ∏è Protection iCloud avanc√©e
‚Ä¢ üîÑ Maintenance automatique programm√©e

Votre Mac est maintenant sous protection intelligente !"""

        self.log_message(welcome_msg)
        
        # D√©marrer l'interface
        self.root.mainloop()

if __name__ == "__main__":
    app = ModernMacCleanerPro()
    app.run()