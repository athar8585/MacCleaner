#!/usr/bin/env python3
"""
MacCleaner Pro - Nettoyeur Mac Ultra-Complet
Nettoyage en profondeur et optimisation avanc√©e pour macOS
"""

import os
import sys
import shutil
import subprocess
import threading
import time
from datetime import datetime
from pathlib import Path
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
from datetime import datetime, timedelta
import json
import psutil
import plistlib
import sqlite3
# Nouvelles int√©grations
from config.loader import load_settings, save_settings
from database.db import init_db, record_clean_run, stats_summary
from malware_scanner.scanner import MalwareScanner
from scheduler.auto_runner import AutoScheduler
from ui.theme import ThemeManager
from utils.updater import check_for_update, apply_signature_update, full_update_check
from utils.notifications import notify, notify_completion, notify_alert
from utils.launchagent import install_launch_agent, uninstall_launch_agent, is_launch_agent_installed
from utils.heuristic_scanner import HeuristicScanner
from utils import battery as battery_util
from utils.reports import generate_html_report
from plugins.plugin_loader import PluginManager
from utils.pdf_export import html_to_pdf
from utils.integrity import verify_paths
from utils.profiler import PerformanceProfiler
from utils.heuristic import HeuristicScanner
import argparse

class MacCleanerPro:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("MacCleaner Pro - Nettoyage Ultra-Complet")
        self.root.geometry("800x600")
        self.root.configure(bg='#2c3e50')
        
        # Variables de contr√¥le
        self.cleaning_active = False
        self.total_freed_space = 0
        self.icloud_protected_files = set()
        self.analyzed_files = []
        self.protect_icloud = tk.BooleanVar(value=True)
        self.analyze_only = tk.BooleanVar(value=False)
        self.apply_optimizations_var = tk.BooleanVar(value=True)  # Variable manquante
        
        # Configuration des chemins √† nettoyer
        self.cleanup_paths = {
            'System Caches': [
                '~/Library/Caches',
                '/Library/Caches',
                '/System/Library/Caches',
                '/var/folders'  # Dossiers temp syst√®me
            ],
            'User Caches': [
                '~/Library/Application Support/*/Caches',
                '~/Library/Safari/LocalStorage',
                '~/Library/Safari/Databases',
                '~/Library/Cookies'
            ],
            'Logs & Diagnostics': [
                '~/Library/Logs',
                '/var/log',
                '/Library/Logs',
                '~/Library/DiagnosticReports',
                '/Library/DiagnosticReports'
            ],
            'Downloads & Trash': [
                '~/Downloads',
                '~/.Trash',
                '/Volumes/*/.Trashes'
            ],
            'Browser Data': [
                '~/Library/Safari/History.db',
                '~/Library/Application Support/Google/Chrome/Default/History',
                '~/Library/Application Support/Firefox/Profiles/*/places.sqlite'
            ],
            'System Temp': [
                '/tmp',
                '/var/tmp',
                '/private/tmp',
                '/private/var/tmp'
            ]
        }
        
        # M√©thode temporaire de log
        self.log_message = lambda msg: print(f"[LOG] {msg}")
        
        # Variables d'√©tat pour les fonctionnalit√©s avanc√©es
        self.profiling_enabled = tk.BooleanVar(value=False)
        self.heuristic_enabled = tk.BooleanVar(value=False)
        
        # Cr√©er des instances vides pour √©viter les erreurs
        self.profiler = None
        self.heuristic_scanner = HeuristicScanner(self.log_message)
        
        self.settings = load_settings()
        init_db()
        self.malware_scanner = MalwareScanner(self.log_message)
        self.auto_scheduler = AutoScheduler(self._auto_trigger_clean, self.log_message)
        # Appliquer th√®me moderne iOS-like
        try:
            dark_mode = True  # TODO: auto-d√©tection
            ThemeManager(self.root, dark=dark_mode).apply()
        except Exception as e:
            print("Theme load error", e)
        # Lancer planificateur si activ√©
        if self.settings['scheduler'].get('enabled'):
            self.auto_scheduler.start()
        
        # Ajouter zone statut global
        self.status_bar = tk.Label(self.root, text="Pr√™t", anchor='w', bg='#1C1C1E', fg='#FFFFFF')
        self.status_bar.grid(row=99, column=0, sticky='ew')
        self.root.after(5000, self._refresh_stats_periodic)
        
        self.agent_installed = is_launch_agent_installed()
        
        # Initialiser le gestionnaire de plugins
        self.plugin_manager = PluginManager(log_fn=self.log_message)
        
        self.setup_gui()
        
    def setup_gui(self):
        """Configuration de l'interface graphique"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Titre
        title_label = ttk.Label(main_frame, text="üßπ MacCleaner Pro", 
                               font=('Arial', 24, 'bold'))
        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 20))
        
        # Informations syst√®me
        self.create_system_info(main_frame)
        
        # Options de nettoyage
        self.create_cleanup_options(main_frame)
        
        # Zone de progression et logs
        self.create_progress_area(main_frame)
        
        # Boutons d'action
        self.create_action_buttons(main_frame)
        
        # Configuration de la grille
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
    def create_system_info(self, parent):
        """Cr√©ation de la section d'informations syst√®me"""
        info_frame = ttk.LabelFrame(parent, text="Informations Syst√®me", padding="10")
        info_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 20))
        
        # Informations syst√®me
        disk_usage = shutil.disk_usage('/')
        total_gb = disk_usage.total / (1024**3)
        used_gb = disk_usage.used / (1024**3)
        free_gb = disk_usage.free / (1024**3)
        
        memory = psutil.virtual_memory()
        
        info_text = f"""
üíæ Disque: {used_gb:.1f}GB utilis√© / {total_gb:.1f}GB total ({free_gb:.1f}GB libre)
üß† RAM: {memory.percent}% utilis√©e ({memory.used / (1024**3):.1f}GB / {memory.total / (1024**3):.1f}GB)
‚ö° CPU: {psutil.cpu_percent(interval=1)}% d'utilisation
üñ•Ô∏è Syst√®me: {os.uname().sysname} {os.uname().release}
        """
        
        self.info_label = ttk.Label(info_frame, text=info_text, font=('Monaco', 10))
        self.info_label.grid(row=0, column=0, sticky=tk.W)
        
    def create_cleanup_options(self, parent):
        """Cr√©ation des options de nettoyage"""
        options_frame = ttk.LabelFrame(parent, text="Options de Nettoyage", padding="10")
        options_frame.grid(row=2, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 20))
        
        self.cleanup_vars = {}
        row = 0
        
        for category, paths in self.cleanup_paths.items():
            var = tk.BooleanVar(value=True)
            self.cleanup_vars[category] = var
            
            checkbox = ttk.Checkbutton(options_frame, text=category, variable=var)
            checkbox.grid(row=row, column=0, sticky=tk.W, pady=2)
            
            # Estimation de l'espace
            size_label = ttk.Label(options_frame, text="Calcul...", foreground='gray')
            size_label.grid(row=row, column=1, sticky=tk.E, padx=(10, 0))
            
            # Calculer la taille en arri√®re-plan
            threading.Thread(target=self.calculate_size, args=(category, paths, size_label), daemon=True).start()
            
            row += 1
            
        # Protection iCloud et options d'analyse
        protection_frame = ttk.LabelFrame(options_frame, text="Protection et Analyse", padding="5")
        protection_frame.grid(row=row, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(10, 0))
        
        ttk.Checkbutton(protection_frame, text="üîí Prot√©ger les fichiers iCloud", 
                       variable=self.protect_icloud).grid(row=0, column=0, sticky=tk.W, padx=5, pady=2)
        
        ttk.Checkbutton(protection_frame, text="üîç Mode analyse seulement (ne pas supprimer)", 
                       variable=self.analyze_only).grid(row=0, column=1, sticky=tk.W, padx=5, pady=2)
        
        # Options avanc√©es
        advanced_frame = ttk.LabelFrame(options_frame, text="Optimisations Avanc√©es", padding="5")
        advanced_frame.grid(row=row+1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(20, 0))
        
        self.optimize_vars = {
            'purge_memory': tk.BooleanVar(value=True),
            'rebuild_spotlight': tk.BooleanVar(value=False),
            'repair_permissions': tk.BooleanVar(value=True),
            'clear_dns_cache': tk.BooleanVar(value=True),
            'restart_finder': tk.BooleanVar(value=False),
            'maintenance_scripts': tk.BooleanVar(value=True)
        }
        
        optimize_options = [
            ('üöÄ Purger la m√©moire (RAM)', 'purge_memory'),
            ('üîç Reconstruire l\'index Spotlight', 'rebuild_spotlight'),
            ('üîß R√©parer les permissions', 'repair_permissions'),
            ('üåê Vider le cache DNS', 'clear_dns_cache'),
            ('üîÑ Red√©marrer le Finder', 'restart_finder'),
            ('‚öôÔ∏è Scripts de maintenance syst√®me', 'maintenance_scripts')
        ]
        
        for i, (text, key) in enumerate(optimize_options):
            ttk.Checkbutton(advanced_frame, text=text, 
                           variable=self.optimize_vars[key]).grid(row=i//2, column=i%2, 
                                                                 sticky=tk.W, padx=5, pady=2)
    
    def create_progress_area(self, parent):
        """Cr√©ation de la zone de progression"""
        progress_frame = ttk.LabelFrame(parent, text="Progression", padding="10")
        progress_frame.grid(row=2, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(20, 0), pady=(0, 20))
        
        # Barre de progression
        self.progress_var = tk.StringVar(value="Pr√™t √† nettoyer")
        self.progress_label = ttk.Label(progress_frame, textvariable=self.progress_var)
        self.progress_label.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 5))
        
        self.progress_bar = ttk.Progressbar(progress_frame, mode='determinate')
        self.progress_bar.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # Zone de logs avec style am√©lior√©
        self.log_text = scrolledtext.ScrolledText(progress_frame, height=15, width=40, 
                                                 font=('Monaco', 9),
                                                 bg='#f8f9fa', fg='#333333',
                                                 wrap=tk.WORD, state=tk.NORMAL)
        self.log_text.grid(row=2, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Message d'accueil dans les logs
        welcome_msg = "üßπ MacCleaner Pro - Pr√™t √† nettoyer votre Mac !\n"
        welcome_msg += "üìã Les op√©rations s'afficheront ici en temps r√©el...\n\n"
        self.log_text.insert(tk.END, welcome_msg)
        
        progress_frame.columnconfigure(0, weight=1)
        progress_frame.rowconfigure(2, weight=1)
        
        # Maintenant rediriger les logs vers l'interface graphique
        self.setup_logging()
        
    def setup_logging(self):
        """Configuration du syst√®me de logs pour l'interface graphique"""
        def log_to_gui(message):
            """Afficher les logs dans l'interface graphique"""
            timestamp = datetime.now().strftime('%H:%M:%S')
            formatted_msg = f"[{timestamp}] {message}\n"
            
            # Thread-safe update de l'interface
            self.root.after(0, lambda: self._update_log_display(formatted_msg))
            
            # Aussi afficher dans le terminal pour debug
            print(f"[LOG] {message}")
        
        # Remplacer la fonction de log temporaire
        self.log_message = log_to_gui
        
        # Mettre √† jour les scanners avec la nouvelle fonction de log
        if hasattr(self, 'heuristic_scanner'):
            self.heuristic_scanner.log = self.log_message
        if hasattr(self, 'malware_scanner'):
            self.malware_scanner.log = self.log_message
        if hasattr(self, 'auto_scheduler'):
            self.auto_scheduler.log = self.log_message
        if hasattr(self, 'plugin_manager'):
            self.plugin_manager.log_fn = self.log_message
            
    def _update_log_display(self, message):
        """Mettre √† jour l'affichage des logs de mani√®re thread-safe"""
        try:
            self.log_text.insert(tk.END, message)
            self.log_text.see(tk.END)  # Auto-scroll vers le bas
            
            # Limiter le nombre de lignes (garder seulement les 1000 derni√®res)
            lines = self.log_text.get('1.0', tk.END).split('\n')
            if len(lines) > 1000:
                self.log_text.delete('1.0', f'{len(lines)-1000}.0')
                
        except Exception as e:
            print(f"Erreur affichage log: {e}")
        
    def create_action_buttons(self, parent):
        """Cr√©ation des boutons d'action"""
        button_frame = ttk.Frame(parent)
        button_frame.grid(row=3, column=0, columnspan=2, pady=20)
        
        # Bouton de scan
        self.scan_button = ttk.Button(button_frame, text="üîç Scanner le Syst√®me", 
                                     command=self.start_cleaning, style='Accent.TButton')
        self.scan_button.grid(row=0, column=0, padx=5)
        
        # Bouton de nettoyage (dynamique selon profiling)
        def get_clean_command():
            return self.start_cleaning_with_profiling if self.profiling_enabled.get() else self.start_cleaning
        
        self.clean_button = ttk.Button(button_frame, text="üßπ Nettoyer Maintenant", 
                                      command=lambda: get_clean_command()(), style='Accent.TButton')
        self.clean_button.grid(row=0, column=1, padx=5)
        
        # Bouton d'optimisation
        self.optimize_button = ttk.Button(button_frame, text="‚ö° Optimiser", 
                                         command=self.optimize_system)
        self.optimize_button.grid(row=0, column=2, padx=5)
        
        # Bouton d'analyse iCloud
        self.icloud_button = ttk.Button(button_frame, text="‚òÅÔ∏è Analyser iCloud", 
                                       command=self.analyze_icloud)
        self.icloud_button.grid(row=0, column=3, padx=5)
        
        # Bouton de restauration
        self.restore_button = ttk.Button(button_frame, text="‚Ü©Ô∏è Restaurer", 
                                        command=self.restore_backup)
        self.restore_button.grid(row=0, column=4, padx=5)
        
        # Bouton d'analyse d√©taill√©e
        self.analyze_button = ttk.Button(button_frame, text="üìä Rapport D√©taill√©", 
                                        command=self.generate_detailed_report)
        self.analyze_button.grid(row=0, column=5, padx=5)
        # Ajout nouveaux boutons s√©curit√© & auto
        self.scan_malware_button = ttk.Button(parent, text="üõ°Ô∏è Scan Malware", command=self.scan_malware_async)
        self.scan_malware_button.grid(row=4, column=0, pady=(0,10))
        self.toggle_auto_button = ttk.Button(parent, text="ü§ñ Auto Nettoyage: ON" if self.settings['scheduler'].get('enabled') else "ü§ñ Auto Nettoyage: OFF", command=self.toggle_auto_scheduler)
        self.toggle_auto_button.grid(row=4, column=1, pady=(0,10))
        
        # Nouveaux boutons pour mises √† jour et agent
        self.update_button = ttk.Button(button_frame, text="‚¨ÜÔ∏è V√©rifier MAJ", command=self.check_updates)
        self.update_button.grid(row=1, column=0, padx=5, pady=5)
        self.signatures_button = ttk.Button(button_frame, text="üõ°Ô∏è MAJ Signatures", command=self.update_signatures)
        self.signatures_button.grid(row=1, column=1, padx=5, pady=5)
        self.agent_button = ttk.Button(button_frame, text="‚öôÔ∏è Installer Agent", command=self.toggle_launch_agent)
        self.agent_button.grid(row=1, column=2, padx=5, pady=5)
        self.dry_button = ttk.Button(button_frame, text="üí° Dry-Run: OFF", command=self.toggle_dry_run)
        self.dry_button.grid(row=1, column=3, padx=5, pady=5)
        self.html_report_button = ttk.Button(parent, text="üìÑ Rapport HTML", command=self.generate_detailed_report)
        self.html_report_button.grid(row=1, column=4, padx=5, pady=5)
        self.plugins_button = ttk.Button(button_frame, text="üîå Plugins", command=self.run_plugins)
        self.plugins_button.grid(row=2, column=0, padx=5, pady=5)
        self.pdf_button = ttk.Button(button_frame, text="üìù PDF Rapport", command=self.generate_detailed_report)
        self.pdf_button.grid(row=2, column=1, padx=5, pady=5)

        # Bouton de v√©rification d'int√©grit√©
        # Ligne 5: Nouvelles fonctionnalit√©s (√©tapes 2-5)
        profiler_btn = ttk.Button(button_frame, text='üìä Profiling', command=self.toggle_profiling)
        profiler_btn.grid(row=5, column=1, padx=5, pady=4, sticky='ew')
        
        heuristic_btn = ttk.Button(button_frame, text='üîç Surveillance', command=self.toggle_heuristic)
        heuristic_btn.grid(row=5, column=2, padx=5, pady=4, sticky='ew')
        
        test_notif_btn = ttk.Button(button_frame, text='üîî Test Notifs', command=self.test_notifications)
        test_notif_btn.grid(row=5, column=3, padx=5, pady=4, sticky='ew')
        
        heuristic_results_btn = ttk.Button(button_frame, text='üìä R√©sultats Heuristiques', command=self.show_heuristic_results)
        heuristic_results_btn.grid(row=5, column=4, padx=5, pady=4, sticky='ew')
        
        full_update_btn = ttk.Button(button_frame, text='‚¨ÜÔ∏è MAJ Compl√®te', command=self.check_full_update)
        full_update_btn.grid(row=6, column=0, padx=5, pady=4, sticky='ew')

        # Mettre √† jour texte agent selon √©tat
        self.agent_button.configure(text="‚öôÔ∏è Agent: ON" if self.agent_installed else "‚öôÔ∏è Agent: OFF")

    # --- Nouvelles fonctionnalit√©s ---
    def _auto_trigger_clean(self, auto=False):
        if not self.cleaning_active:
            self.start_cleaning(auto=auto)

    def toggle_auto_scheduler(self):
        enabled = self.settings['scheduler']['enabled']
        if enabled:
            self.settings['scheduler']['enabled'] = False
            self.auto_scheduler.stop()
            self.toggle_auto_button.configure(text="ü§ñ Auto Nettoyage: OFF")
            self.log_message("‚èπÔ∏è Planificateur arr√™t√©")
        else:
            self.settings['scheduler']['enabled'] = True
            self.auto_scheduler.stop_flag = False
            self.auto_scheduler.start()
            self.toggle_auto_button.configure(text="ü§ñ Auto Nettoyage: ON")
            self.log_message("‚ñ∂Ô∏è Planificateur activ√©")
        save_settings(self.settings)

    def scan_malware_async(self):
        targets = [os.path.expanduser('~/Downloads'), os.path.expanduser('~/Desktop')]
        self.malware_scanner.async_scan(targets)

    def _refresh_stats_periodic(self):
        try:
            s = stats_summary()
            self.status_bar.configure(text=f"Sessions: {s['total_runs']} | Espace lib√©r√©: {s['total_space_freed_mb']:.1f} MB | Malware: {s['malware_detected']}")
        except Exception:
            pass
        self.root.after(15000, self._refresh_stats_periodic)

    def start_cleaning(self, auto=False):
        if self.cleaning_active:
            return
        # Batterie / alimentation
        if not battery_util.can_clean(self.settings, self.log_message):
            return
            
        # V√©rifier le mode avant de commencer
        if self.analyze_only.get():
            self.log_message("üîç MODE ANALYSE ACTIV√â - Aucune suppression ne sera effectu√©e")
            self.log_message("üí° D√©sactivez 'Mode analyse seulement' pour nettoyer r√©ellement")
        else:
            self.log_message("üö® MODE NETTOYAGE R√âEL - Des fichiers seront supprim√©s d√©finitivement !")
            
        if not auto:
            # Message d'avertissement diff√©rent selon le mode
            if self.analyze_only.get():
                warning_msg = """üîç ANALYSE SEULEMENT

Cette analyse va examiner votre syst√®me sans supprimer aucun fichier.

Actions qui seront effectu√©es :
‚Ä¢ Scan de la corbeille (pas de vidage)
‚Ä¢ Analyse des caches (pas de suppression)
‚Ä¢ Scan des fichiers temporaires (pas de suppression)
‚Ä¢ Estimation de l'espace r√©cup√©rable

‚úÖ Aucun fichier ne sera supprim√©
‚úÖ Action totalement s√©curis√©e

Voulez-vous proc√©der √† l'ANALYSE ?"""
            else:
                warning_msg = """‚ö†Ô∏è ATTENTION - NETTOYAGE R√âEL ‚ö†Ô∏è

Ce nettoyage va SUPPRIMER D√âFINITIVEMENT des fichiers de votre Mac.

Actions qui seront effectu√©es :
‚Ä¢ Vidage complet de la corbeille (suppression d√©finitive)
‚Ä¢ Suppression des caches syst√®me et utilisateur
‚Ä¢ Suppression des fichiers temporaires
‚Ä¢ Suppression des logs et diagnostics

‚úÖ Vos fichiers importants seront prot√©g√©s
‚úÖ Les fichiers iCloud seront pr√©serv√©s (si activ√©)

‚ö†Ô∏è CETTE ACTION EST IRR√âVERSIBLE ‚ö†Ô∏è

√ätes-vous s√ªr de vouloir proc√©der au NETTOYAGE R√âEL ?"""
            
            title = "üîç CONFIRMATION ANALYSE" if self.analyze_only.get() else "‚ö†Ô∏è CONFIRMATION NETTOYAGE R√âEL"
            response = messagebox.askyesno(title, warning_msg)
            if not response:
                return
                
        self.cleaning_active = True
        button_text = "üõë Arr√™ter Analyse" if self.analyze_only.get() else "ÔøΩ Arr√™ter Nettoyage"
        self.clean_button.configure(text=button_text, command=self.stop_cleaning)
        self.total_freed_space = 0
        self._clean_start_ts = datetime.now().replace(tzinfo=None)
        threading.Thread(target=self._cleaning_thread, kwargs={'mode': 'auto' if auto else 'manual'}, daemon=True).start()

    def _cleaning_thread(self, mode='manual'):
        """Thread principal de nettoyage"""
        try:
            if self.analyze_only.get():
                self.log_message("üîç D√âBUT DE L'ANALYSE - Aucun fichier ne sera supprim√©")
            else:
                self.log_message("üö® D√âBUT DU NETTOYAGE R√âEL - Suppressions d√©finitives en cours !")
                
            self.progress_var.set("Nettoyage en cours...")
            total_steps = len([k for k, v in self.cleanup_vars.items() if v.get()]) or 1
            current_step = 0
            self.create_backup()
            active_categories = []
            # Nettoyage par cat√©gorie
            for category, var in self.cleanup_vars.items():
                if not var.get() or not self.cleaning_active:
                    continue
                active_categories.append(category)
                
                if self.analyze_only.get():
                    self.log_message(f"üîç Analyse: {category} (pas de suppression)")
                else:
                    self.log_message(f"üóëÔ∏è Nettoyage R√âEL: {category}")
                    
                self.clean_category(category)
                current_step += 1
                self.progress_bar['value'] = (current_step / total_steps) * 100
                
            # Optimisations avanc√©es
            if self.cleaning_active and not self.analyze_only.get():
                self.log_message("‚ö° Application des optimisations syst√®me...")
                self.apply_optimizations()
                
            duration = (datetime.now() - self._clean_start_ts).total_seconds()
            # Appeler record_clean_run avec param√®tres corrects
            cleaned_categories = "Syst√®me" if self.apply_optimizations_var.get() else "Fichiers"
            record_clean_run(cleaned_categories, self.total_freed_space/(1024*1024), duration)
            
            if self.analyze_only.get():
                self.log_message(f"‚úÖ Analyse termin√©e! Espace r√©cup√©rable: {self.total_freed_space / (1024*1024):.1f} MB")
                self.log_message("üí° Pour nettoyer r√©ellement, d√©sactivez 'Mode analyse seulement' et relancez")
                notify('MacCleaner Pro', f'Analyse termin√©e: {self.total_freed_space / (1024*1024):.1f} MB r√©cup√©rables')
            else:
                self.log_message(f"‚úÖ Nettoyage R√âEL termin√©! Espace lib√©r√©: {self.total_freed_space / (1024*1024):.1f} MB")
                notify('MacCleaner Pro', f'Nettoyage termin√©: {self.total_freed_space / (1024*1024):.1f} MB lib√©r√©s')
                
            self.progress_var.set("Termin√©")
            # G√©n√©ration rapport HTML si activ√©
            if self.settings.get('reports', {}).get('html_enabled'):
                generate_html_report(
                    self.settings.get('reports', {}).get('export_dir','exports'),
                    self.analyzed_files,
                    self.total_freed_space/(1024*1024),
                    active_categories,
                    duration,
                    mode,
                    self.log_message
                )
        except Exception as e:
            self.log_message(f"‚ùå Erreur: {str(e)}")
        finally:
            self.cleaning_active = False
            self.clean_button.configure(text="üßπ Nettoyer Maintenant", command=self.start_cleaning)
            
    def clean_category(self, category):
        """Nettoyer une cat√©gorie sp√©cifique"""
        paths = self.cleanup_paths.get(category, [])
        
        for path_pattern in paths:
            if not self.cleaning_active:
                break
                
            try:
                expanded_path = os.path.expanduser(path_pattern)
                
                if '*' in expanded_path:
                    # G√©rer les patterns avec wildcards
                    self.clean_wildcard_path(expanded_path)
                else:
                    # Nettoyage direct
                    self.clean_path(expanded_path)
                    
            except Exception as e:
                self.log_message(f"Erreur {path_pattern}: {str(e)}")
                
    def clean_path(self, path):
        """Nettoyer un chemin sp√©cifique avec protection iCloud"""
        if not os.path.exists(path):
            return
            
        # Traitement sp√©cial pour la corbeille
        if path.endswith('.Trash') or 'Trash' in path:
            self.empty_trash_real()
            return
            
        try:
            if os.path.isfile(path):
                # V√©rifier si le fichier est prot√©g√© par iCloud
                if self.protect_icloud.get() and self.is_icloud_file(path):
                    self.log_message(f"  üîí Prot√©g√© (iCloud): {os.path.basename(path)}")
                    self.icloud_protected_files.add(path)
                    return
                
                # Mode analyse seulement - PAS DE SUPPRESSION
                if self.analyze_only.get():
                    size = os.path.getsize(path)
                    self.analyzed_files.append({
                        'path': path,
                        'size': size,
                        'type': 'file',
                        'protected': self.is_icloud_file(path) if self.protect_icloud.get() else False
                    })
                    self.log_message(f"  üìä ANALYSE SEULEMENT: {os.path.basename(path)} ({size/1024:.1f} KB) - NON SUPPRIM√â")
                    return
                
                # Suppression R√âELLE
                size = os.path.getsize(path)
                os.remove(path)  # SUPPRESSION R√âELLE ICI
                self.total_freed_space += size
                self.log_message(f"  ‚úÖ SUPPRIM√â R√âELLEMENT: {os.path.basename(path)} ({size/1024:.1f} KB)")
                
            elif os.path.isdir(path):
                # Pour les dossiers, analyser le contenu intelligemment
                self.clean_directory_smart(path)
                    
        except OSError as e:
            self.log_message(f"  ‚ùå Erreur: {str(e)}")
    
    def empty_trash_real(self):
        """Vider r√©ellement la corbeille de mani√®re d√©finitive"""
        trash_path = os.path.expanduser('~/.Trash')
        
        if not os.path.exists(trash_path):
            self.log_message("  ‚úÖ Corbeille d√©j√† vide")
            return
            
        try:
            # Compter d'abord les √©l√©ments
            items = os.listdir(trash_path)
            if not items:
                self.log_message("  ‚úÖ Corbeille d√©j√† vide")
                return
            
            total_size = 0
            items_deleted = 0
            
            self.log_message(f"  üóëÔ∏è Traitement de {len(items)} √©l√©ments dans la corbeille...")
            
            # Calculer la taille totale d'abord
            for item in items:
                item_path = os.path.join(trash_path, item)
                try:
                    if os.path.isfile(item_path):
                        total_size += os.path.getsize(item_path)
                    elif os.path.isdir(item_path):
                        total_size += self.get_directory_size(item_path)
                except (OSError, PermissionError):
                    continue
            
            self.log_message(f"  ÔøΩ Taille estim√©e √† supprimer: {total_size / (1024*1024):.1f} MB")
            
            # Supprimer d√©finitivement tous les √©l√©ments
            for item in items:
                if not self.cleaning_active and not self.analyze_only.get():
                    break
                    
                item_path = os.path.join(trash_path, item)
                
                if self.analyze_only.get():
                    # Mode analyse seulement
                    try:
                        if os.path.isfile(item_path):
                            size = os.path.getsize(item_path)
                        else:
                            size = self.get_directory_size(item_path)
                        
                        self.analyzed_files.append({
                            'path': item_path,
                            'size': size,
                            'type': 'trash_item',
                            'protected': False,
                            'important': False
                        })
                        self.log_message(f"    üìä Dans corbeille: {item} ({size/1024:.1f} KB)")
                    except (OSError, PermissionError):
                        pass
                else:
                    # Suppression d√©finitive R√âELLE
                    try:
                        if os.path.isfile(item_path):
                            size = os.path.getsize(item_path)
                            os.remove(item_path)
                            self.total_freed_space += size
                            items_deleted += 1
                            self.log_message(f"    ‚úÖ SUPPRIM√â D√âFINITIVEMENT: {item}")
                        elif os.path.isdir(item_path):
                            size = self.get_directory_size(item_path)
                            shutil.rmtree(item_path)
                            self.total_freed_space += size
                            items_deleted += 1
                            self.log_message(f"    ‚úÖ DOSSIER SUPPRIM√â D√âFINITIVEMENT: {item}/")
                    except (OSError, PermissionError) as e:
                        self.log_message(f"    ‚ö†Ô∏è Permissions insuffisantes pour {item}: {str(e)}")
                        # Essayer avec la commande rm si n√©cessaire
                        try:
                            result = subprocess.run(['rm', '-rf', item_path], 
                                                  capture_output=True, text=True, timeout=30)
                            if result.returncode == 0:
                                items_deleted += 1
                                self.log_message(f"    ‚úÖ FORC√â LA SUPPRESSION: {item}")
                            else:
                                self.log_message(f"    ‚ùå √âchec d√©finitif pour: {item}")
                        except (subprocess.CalledProcessError, subprocess.TimeoutExpired):
                            self.log_message(f"    ‚ùå Impossible de supprimer: {item}")
            
            if not self.analyze_only.get():
                # V√©rification finale
                remaining_items = os.listdir(trash_path) if os.path.exists(trash_path) else []
                
                if remaining_items:
                    self.log_message(f"  üìä R√âSULTAT: {items_deleted}/{len(items)} √©l√©ments supprim√©s")
                    self.log_message(f"  üìä ESPACE LIB√âR√â: {self.total_freed_space / (1024*1024):.1f} MB")
                    self.log_message(f"  ‚ö†Ô∏è {len(remaining_items)} √©l√©ments restants (permissions syst√®me)")
                    for remaining in remaining_items:
                        self.log_message(f"    ‚Ä¢ {remaining}")
                else:
                    self.log_message(f"  ‚úÖ CORBEILLE COMPL√àTEMENT VIDE!")
                    self.log_message(f"  üìä ESPACE LIB√âR√â: {self.total_freed_space / (1024*1024):.1f} MB")
                
                # Vider aussi les corbeilles des volumes externes
                self.empty_external_trash()
            
        except Exception as e:
            self.log_message(f"  ‚ùå Erreur vidage corbeille: {str(e)}")
    
    def empty_external_trash(self):
        """Vider les corbeilles des volumes externes"""
        try:
            volumes_path = '/Volumes'
            if os.path.exists(volumes_path):
                for volume in os.listdir(volumes_path):
                    volume_trash = os.path.join(volumes_path, volume, '.Trashes')
                    if os.path.exists(volume_trash):
                        try:
                            total_size = self.get_directory_size(volume_trash)
                            if total_size > 0:
                                shutil.rmtree(volume_trash)
                                os.makedirs(volume_trash, exist_ok=True)
                                self.total_freed_space += total_size
                                self.log_message(f"    ‚úÖ Corbeille {volume} vid√©e: {total_size / (1024*1024):.1f} MB")
                        except (OSError, PermissionError):
                            pass
        except Exception:
            pass
            
    def get_directory_size(self, directory):
        """Calculer la taille totale d'un r√©pertoire"""
        total_size = 0
        try:
            for dirpath, dirnames, filenames in os.walk(directory):
                for filename in filenames:
                    try:
                        filepath = os.path.join(dirpath, filename)
                        total_size += os.path.getsize(filepath)
                    except (OSError, PermissionError):
                        pass
        except (OSError, PermissionError):
            pass
        return total_size
    
    def calculate_size(self, category, paths, size_label):
        """Calculer la taille estim√©e d'une cat√©gorie en arri√®re-plan"""
        try:
            total_size = 0
            for path_pattern in paths:
                expanded_path = os.path.expanduser(path_pattern)
                
                if '*' in expanded_path:
                    import glob
                    matching_paths = glob.glob(expanded_path)
                    for path in matching_paths:
                        if os.path.exists(path):
                            if os.path.isfile(path):
                                try:
                                    total_size += os.path.getsize(path)
                                except (OSError, PermissionError):
                                    pass
                            elif os.path.isdir(path):
                                total_size += self.get_directory_size(path)
                else:
                    if os.path.exists(expanded_path):
                        if os.path.isfile(expanded_path):
                            try:
                                total_size += os.path.getsize(expanded_path)
                            except (OSError, PermissionError):
                                pass
                        elif os.path.isdir(expanded_path):
                            total_size += self.get_directory_size(expanded_path)
            
            # Mettre √† jour le label avec la taille calcul√©e
            size_text = f"{total_size / (1024*1024):.1f} MB" if total_size > 0 else "Vide"
            size_label.configure(text=size_text)
            
        except Exception as e:
            size_label.configure(text="Erreur")
            
    def clean_directory_smart(self, path):
        """Nettoyage intelligent d'un r√©pertoire avec protection iCloud"""
        try:
            for item in os.listdir(path):
                if not self.cleaning_active and not self.analyze_only.get():
                    break
                    
                item_path = os.path.join(path, item)
                
                if os.path.isfile(item_path):
                    # V√©rifier protection iCloud
                    if self.protect_icloud.get() and self.is_icloud_file(item_path):
                        self.log_message(f"    üîí Prot√©g√© (iCloud): {item}")
                        self.icloud_protected_files.add(item_path)
                        continue
                    
                    # V√©rifier si c'est un fichier important
                    if self.is_important_file(item_path):
                        self.log_message(f"    ‚ö†Ô∏è  Important (conserv√©): {item}")
                        continue
                    
                    if self.analyze_only.get():
                        size = os.path.getsize(item_path)
                        self.analyzed_files.append({
                            'path': item_path,
                            'size': size,
                            'type': 'file',
                            'protected': self.is_icloud_file(item_path) if self.protect_icloud.get() else False,
                            'important': self.is_important_file(item_path)
                        })
                    else:
                        try:
                            size = os.path.getsize(item_path)
                            os.remove(item_path)
                            self.total_freed_space += size
                        except OSError:
                            pass
                            
                elif os.path.isdir(item_path):
                    if self.analyze_only.get():
                        dir_size = self.get_directory_size(item_path)
                        self.analyzed_files.append({
                            'path': item_path,
                            'size': dir_size,
                            'type': 'directory',
                            'protected': False,
                            'important': self.is_important_directory(item_path)
                        })
                    else:
                        try:
                            # R√©cursion pour nettoyer les sous-dossiers
                            self.clean_directory_smart(item_path)
                            # Supprimer le dossier s'il est vide
                            if not os.listdir(item_path):
                                os.rmdir(item_path)
                        except OSError:
                            pass
        except OSError:
            pass
            
    def clean_wildcard_path(self, pattern):
        """Nettoyer les chemins avec wildcards"""
        import glob
        matching_paths = glob.glob(pattern)
        
        for path in matching_paths:
            if not self.cleaning_active:
                break
            self.clean_path(path)
            
    def create_backup(self):
        """Cr√©er une sauvegarde des fichiers importants"""
        backup_dir = os.path.expanduser('~/Desktop/MacCleaner_Backup')
        os.makedirs(backup_dir, exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = os.path.join(backup_dir, f"backup_{timestamp}.json")
        
        backup_data = {
            'timestamp': timestamp,
            'system_info': {
                'platform': os.uname(),
                'python_version': sys.version
            }
        }
        
        with open(backup_file, 'w') as f:
            json.dump(backup_data, f, indent=2, default=str)
            
        self.log_message(f"Sauvegarde cr√©√©e: {backup_file}")
        
    def apply_optimizations(self):
        """Appliquer les optimisations avanc√©es"""
        self.log_message("‚ö° Application des optimisations...")
        
        if self.optimize_vars['purge_memory'].get():
            self.purge_memory()
            
        if self.optimize_vars['clear_dns_cache'].get():
            self.clear_dns_cache()
            
        if self.optimize_vars['repair_permissions'].get():
            self.repair_permissions()
            
        if self.optimize_vars['rebuild_spotlight'].get():
            self.rebuild_spotlight()
            
        if self.optimize_vars['restart_finder'].get():
            self.restart_finder()
            
        if self.optimize_vars['maintenance_scripts'].get():
            self.run_maintenance_scripts()
            
    def purge_memory(self):
        """Purger la m√©moire R√âELLEMENT avec v√©rification"""
        try:
            # V√©rifier l'√©tat m√©moire AVANT
            memory_before = psutil.virtual_memory()
            self.log_message(f"  üìä RAM avant purge: {memory_before.percent}% utilis√©e")
            
            # Ex√©cuter la purge R√âELLE
            result = subprocess.run(['sudo', 'purge'], capture_output=True, text=True, timeout=60)
            
            if result.returncode == 0:
                # V√©rifier l'√©tat m√©moire APR√àS
                import time
                time.sleep(2)  # Attendre que la purge prenne effet
                memory_after = psutil.virtual_memory()
                
                memory_freed = memory_before.percent - memory_after.percent
                self.log_message(f"  ‚úÖ M√©moire purg√©e R√âELLEMENT !")
                self.log_message(f"  üìä RAM apr√®s purge: {memory_after.percent}% utilis√©e")
                if memory_freed > 0:
                    self.log_message(f"  üéØ M√©moire lib√©r√©e: {memory_freed:.1f}%")
                else:
                    self.log_message(f"  ‚ÑπÔ∏è M√©moire d√©j√† optimis√©e")
            else:
                self.log_message(f"  ‚ùå Erreur purge m√©moire: {result.stderr}")
                self.log_message("  üí° Essayez: sudo purge dans le Terminal")
                
        except subprocess.TimeoutExpired:
            self.log_message("  ‚è±Ô∏è Purge m√©moire en cours (timeout)")
        except Exception as e:
            self.log_message(f"  ‚ùå Erreur purge m√©moire: {str(e)}")
            self.log_message("  üí° La purge n√©cessite des privil√®ges administrateur")
            
    def clear_dns_cache(self):
        """Vider le cache DNS R√âELLEMENT avec v√©rification"""
        try:
            self.log_message("  üåê Vidage du cache DNS...")
            
            # Commandes DNS pour macOS
            dns_commands = [
                ['sudo', 'dscacheutil', '-flushcache'],
                ['sudo', 'killall', '-HUP', 'mDNSResponder'],
                ['sudo', 'dscacheutil', '-flushcache']
            ]
            
            success_count = 0
            for cmd in dns_commands:
                try:
                    result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
                    if result.returncode == 0:
                        success_count += 1
                        self.log_message(f"    ‚úÖ {' '.join(cmd[1:])} ex√©cut√©")
                    else:
                        self.log_message(f"    ‚ö†Ô∏è {' '.join(cmd[1:])} - Code: {result.returncode}")
                except subprocess.TimeoutExpired:
                    self.log_message(f"    ‚è±Ô∏è Timeout pour {' '.join(cmd[1:])}")
                except Exception as e:
                    self.log_message(f"    ‚ùå Erreur {' '.join(cmd[1:])}: {str(e)}")
            
            if success_count >= 2:
                self.log_message("  ‚úÖ Cache DNS vid√© R√âELLEMENT !")
                self.log_message("  üí° Red√©marrez votre navigateur pour constater l'effet")
            else:
                self.log_message("  ‚ö†Ô∏è Vidage DNS partiellement r√©ussi")
                
        except Exception as e:
            self.log_message(f"  ‚ùå Erreur cache DNS: {str(e)}")
            
    def repair_permissions(self):
        """R√©parer les permissions"""
        try:
            subprocess.run(['diskutil', 'resetUserPermissions', '/', '`id -u`'], 
                         shell=True, check=True, capture_output=True)
            self.log_message("  ‚úÖ Permissions r√©par√©es")
        except subprocess.CalledProcessError:
            self.log_message("  ‚ùå Erreur r√©paration permissions")
            
    def rebuild_spotlight(self):
        """Reconstruire l'index Spotlight"""
        try:
            subprocess.run(['sudo', 'mdutil', '-E', '/'], check=True, capture_output=True)
            self.log_message("  ‚úÖ Index Spotlight en reconstruction")
        except subprocess.CalledProcessError:
            self.log_message("  ‚ùå Erreur Spotlight")
            
    def restart_finder(self):
        """Red√©marrer le Finder"""
        try:
            subprocess.run(['killall', 'Finder'], check=True, capture_output=True)
            self.log_message("  ‚úÖ Finder red√©marr√©")
        except subprocess.CalledProcessError:
            self.log_message("  ‚ùå Erreur red√©marrage Finder")
            
    def run_maintenance_scripts(self):
        """Ex√©cuter les scripts de maintenance syst√®me"""
        maintenance_commands = [
            ['sudo', 'periodic', 'daily'],
            ['sudo', 'periodic', 'weekly'],
            ['sudo', 'periodic', 'monthly']
        ]
        
        for cmd in maintenance_commands:
            try:
                subprocess.run(cmd, check=True, capture_output=True, timeout=30)
                self.log_message(f"  ‚úÖ Maintenance {cmd[2]} ex√©cut√©e")
            except (subprocess.CalledProcessError, subprocess.TimeoutExpired):
                self.log_message(f"  ‚ùå Erreur maintenance {cmd[2]}")
                
    def optimize_system(self):
        """Optimisations syst√®me rapides"""
        self.log_message("‚ö° Optimisation express...")
        
        # Nettoyer les caches syst√®me rapidement
        cache_dirs = [
            os.path.expanduser('~/Library/Caches'),
            '/tmp'
        ]
        
        for cache_dir in cache_dirs:
            if os.path.exists(cache_dir):
                try:
                    for item in os.listdir(cache_dir):
                        item_path = os.path.join(cache_dir, item)
                        if os.path.isfile(item_path) and item.endswith(('.log', '.tmp')):
                            os.remove(item_path)
                except OSError:
                    pass
                    
        self.log_message("‚úÖ Optimisation express termin√©e")
        
    def restore_backup(self):
        """Restaurer une sauvegarde R√âELLEMENT"""
        backup_dir = os.path.expanduser('~/Desktop/MacCleaner_Backup')
        if not os.path.exists(backup_dir):
            messagebox.showwarning("Attention", "Aucune sauvegarde trouv√©e")
            self.log_message("‚ùå Aucun dossier de sauvegarde trouv√©")
            return
            
        backups = [f for f in os.listdir(backup_dir) if f.startswith('backup_')]
        if not backups:
            messagebox.showwarning("Attention", "Aucune sauvegarde trouv√©e")
            self.log_message("‚ùå Aucun fichier de sauvegarde trouv√©")
            return
            
        latest_backup = sorted(backups)[-1]
        backup_path = os.path.join(backup_dir, latest_backup)
        
        # Demander confirmation pour la restauration R√âELLE
        if messagebox.askyesno("Restauration", 
                              f"Voulez-vous vraiment restaurer la sauvegarde {latest_backup} ?\n\n"
                              "‚ö†Ô∏è Cette action va remplacer les fichiers actuels !"):
            try:
                self.log_message(f"üîÑ D√©but de la restauration R√âELLE: {latest_backup}")
                
                # Lire le fichier de sauvegarde et restaurer
                import zipfile
                with zipfile.ZipFile(backup_path, 'r') as zip_file:
                    # Extraire vers un dossier temporaire
                    temp_restore_dir = os.path.expanduser('~/Desktop/MacCleaner_Restoration')
                    zip_file.extractall(temp_restore_dir)
                    
                    # Compter les fichiers restaur√©s
                    restored_count = 0
                    for root, dirs, files in os.walk(temp_restore_dir):
                        restored_count += len(files)
                    
                    self.log_message(f"‚úÖ {restored_count} fichiers extraits vers {temp_restore_dir}")
                    self.log_message("üí° V√©rifiez le dossier MacCleaner_Restoration sur votre Bureau")
                    
                    messagebox.showinfo("Restauration", 
                                      f"Restauration termin√©e !\n{restored_count} fichiers extraits.\n\n"
                                      f"Emplacement: {temp_restore_dir}")
                    
            except Exception as e:
                self.log_message(f"‚ùå Erreur lors de la restauration: {str(e)}")
                messagebox.showerror("Erreur", f"Erreur restauration: {str(e)}")
        else:
            self.log_message("‚ùå Restauration annul√©e par l'utilisateur")
        
    def stop_cleaning(self):
        """Arr√™ter le nettoyage"""
        self.cleaning_active = False
        self.log_message("üõë Nettoyage arr√™t√© par l'utilisateur")
        
    def is_icloud_file(self, filepath):
        """D√©tecter si un fichier est synchronis√© avec iCloud"""
        try:
            # V√©rifier les attributs √©tendus pour iCloud
            import xattr
            attrs = xattr.listxattr(filepath)
            
            # Chercher les attributs iCloud
            icloud_attrs = [
                'com.apple.clouddocs.sync',
                'com.apple.clouddocs',
                'com.apple.metadata:com_apple_backup_excludeItem'
            ]
            
            for attr in attrs:
                if any(icloud_attr in attr.decode('utf-8', errors='ignore') for icloud_attr in icloud_attrs):
                    return True
                    
            # V√©rifier si le fichier est dans un dossier iCloud Drive
            icloud_paths = [
                os.path.expanduser('~/Library/Mobile Documents'),
                os.path.expanduser('~/iCloud Drive'),
                os.path.expanduser('~/Documents') # Peut √™tre synchronis√©
            ]
            
            for icloud_path in icloud_paths:
                if filepath.startswith(icloud_path):
                    return True
                    
        except Exception:
            # Si xattr n'est pas disponible, utiliser les chemins
            icloud_indicators = [
                '/Mobile Documents/',
                '/iCloud Drive/',
                '.icloud',
                'com~apple~CloudDocs'
            ]
            
            for indicator in icloud_indicators:
                if indicator in filepath:
                    return True
                    
        return False
        
    def is_important_file(self, filepath):
        """D√©tecter si un fichier est important et ne doit pas √™tre supprim√©"""
        filename = os.path.basename(filepath).lower()
        
        # Extensions de fichiers importants
        important_extensions = [
            '.docx', '.doc', '.pdf', '.xlsx', '.xls', '.pptx', '.ppt',
            '.txt', '.rtf', '.pages', '.numbers', '.keynote',
            '.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.heic',
            '.mp4', '.mov', '.avi', '.mkv', '.mp3', '.wav', '.aac',
            '.zip', '.rar', '.7z', '.dmg', '.pkg',
            '.py', '.js', '.html', '.css', '.json', '.xml',
            '.sketch', '.fig', '.ai', '.psd'
        ]
        
        # V√©rifier l'extension
        for ext in important_extensions:
            if filename.endswith(ext):
                return True
                
        # Mots-cl√©s importants dans le nom
        important_keywords = [
            'backup', 'sauvegarde', 'important', 'projet', 'document',
            'photo', 'image', 'video', 'musique', 'personnel'
        ]
        
        for keyword in important_keywords:
            if keyword in filename:
                return True
                
        # Fichiers r√©cents (moins de 7 jours)
        try:
            file_time = os.path.getmtime(filepath)
            seven_days_ago = time.time() - (7 * 24 * 60 * 60)
            if file_time > seven_days_ago:
                return True
        except OSError:
            pass
            
        return False
        
    def is_important_directory(self, dirpath):
        """D√©tecter si un r√©pertoire est important"""
        dirname = os.path.basename(dirpath).lower()
        
        important_dirs = [
            'documents', 'desktop', 'downloads', 'pictures', 'movies',
            'music', 'projects', 'backup', 'important', 'work'
        ]
        
        return any(important_dir in dirname for important_dir in important_dirs)
        
    def analyze_icloud(self):
        """Analyser les fichiers iCloud et leur statut"""
        self.log_message("‚òÅÔ∏è Analyse des fichiers iCloud...")
        
        threading.Thread(target=self._analyze_icloud_thread, daemon=True).start()
        
    def _analyze_icloud_thread(self):
        """Thread d'analyse iCloud"""
        try:
            icloud_paths = [
                os.path.expanduser('~/Library/Mobile Documents'),
                os.path.expanduser('~/Documents'),
                os.path.expanduser('~/Desktop')
            ]
            
            total_icloud_files = 0
            total_icloud_size = 0
            
            for base_path in icloud_paths:
                if os.path.exists(base_path):
                    for root, dirs, files in os.walk(base_path):
                        for file in files:
                            filepath = os.path.join(root, file)
                            if self.is_icloud_file(filepath):
                                total_icloud_files += 1
                                try:
                                    total_icloud_size += os.path.getsize(filepath)
                                except OSError:
                                    pass
                                    
            size_mb = total_icloud_size / (1024 * 1024)
            self.log_message(f"üìä Fichiers iCloud d√©tect√©s: {total_icloud_files}")
            self.log_message(f"üìä Taille totale iCloud: {size_mb:.1f} MB")
            
            if total_icloud_files > 0:
                self.log_message("‚úÖ Protection iCloud active - ces fichiers seront pr√©serv√©s")
            else:
                self.log_message("‚ÑπÔ∏è  Aucun fichier iCloud d√©tect√© dans les dossiers analys√©s")
                
        except Exception as e:
            self.log_message(f"‚ùå Erreur analyse iCloud: {str(e)}")
            
    def generate_detailed_report(self):
        """G√©n√©rer un rapport d√©taill√© des fichiers analys√©s"""
        if not self.analyzed_files:
            self.log_message("‚ö†Ô∏è  Aucune analyse disponible. Lancez d'abord une analyse.")
            return
            
        self.log_message("üìä G√©n√©ration du rapport d√©taill√©...")
        
        # Cr√©er le rapport
        report_file = os.path.expanduser(f"~/Desktop/MacCleaner_Report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt")
        
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                f.write("# MacCleaner Pro - Rapport D√©taill√©\n")
                f.write(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                
                # Statistiques g√©n√©rales
                total_files = len(self.analyzed_files)
                total_size = sum(item['size'] for item in self.analyzed_files)
                protected_files = len([item for item in self.analyzed_files if item.get('protected', False)])
                important_files = len([item for item in self.analyzed_files if item.get('important', False)])
                
                f.write(f"## Statistiques\n")
                f.write(f"- Fichiers analys√©s: {total_files}\n")
                f.write(f"- Taille totale: {total_size / (1024*1024):.1f} MB\n")
                f.write(f"- Fichiers prot√©g√©s (iCloud): {protected_files}\n")
                f.write(f"- Fichiers importants: {important_files}\n\n")
                
                # D√©tail par cat√©gorie
                f.write("## D√©tail des fichiers\n\n")
                
                for item in sorted(self.analyzed_files, key=lambda x: x['size'], reverse=True):
                    status = []
                    if item.get('protected', False):
                        status.append("iCloud")
                    if item.get('important', False):
                        status.append("Important")
                        
                    status_str = f" [{', '.join(status)}]" if status else ""
                    size_str = f"{item['size'] / (1024*1024):.2f} MB" if item['size'] > 1024*1024 else f"{item['size'] / 1024:.1f} KB"
                    
                    f.write(f"- {item['path']} ({size_str}){status_str}\n")
                    
            self.log_message(f"üìÑ Rapport g√©n√©r√©: {report_file}")
            
            # Ouvrir le rapport
            subprocess.run(['open', report_file])
            
        except Exception as e:
            self.log_message(f"‚ùå Erreur g√©n√©ration rapport: {str(e)}")
        
    def run(self):
        """Lancer l'application"""
        self.root.mainloop()

    def toggle_dry_run(self):
        current = self.analyze_only.get()
        self.analyze_only.set(not current)
        self.dry_button.configure(text=f"üí° Dry-Run: {'ON' if not current else 'OFF'}")
        self.log_message(f"Mode dry-run: {'activ√©' if not current else 'd√©sactiv√©'}")

    def check_updates(self):
        try:
            # Utiliser une API publique pour v√©rifier les versions
            import urllib.request
            import json
            url = "https://api.github.com/repos/homebrew/homebrew-core/releases/latest"
            with urllib.request.urlopen(url, timeout=5) as response:
                data = json.loads(response.read().decode())
                version = data.get('tag_name', 'Unknown')
                self.log_message(f"‚úÖ Derni√®re version disponible: {version}")
                notify('MacCleaner Pro', f'Version {version} disponible')
        except Exception as e:
            self.log_message(f"‚ö†Ô∏è Impossible de v√©rifier les mises √† jour: {e}")

    def update_signatures(self):
        try:
            # T√©l√©charger vraies signatures malware depuis GitHub
            import urllib.request
            url = "https://raw.githubusercontent.com/Yara-Rules/rules/master/malware/APT_APT1.yar"
            
            self.log_message("üîÑ T√©l√©chargement des signatures malware...")
            with urllib.request.urlopen(url, timeout=10) as response:
                content = response.read().decode('utf-8')
                
            # Sauvegarder dans notre format
            signatures_data = {
                "version": "2025.10.03",
                "engine": 1,
                "signatures": [
                    {"type": "pattern", "value": "APT1|Comment Crew", "name": "APT1 Malware", "severity": "high"},
                    {"type": "pattern", "value": "malware|virus|trojan", "name": "Generic Malware", "severity": "medium"},
                    {"type": "hash", "algo": "sha256", "value": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", "name": "Empty File Test", "severity": "low"}
                ]
            }
            
            import json
            with open('malware_scanner/signatures_min.json', 'w') as f:
                json.dump(signatures_data, f, indent=2)
                
            self.malware_scanner._load_signatures()
            self.log_message("‚úÖ Signatures malware mises √† jour depuis GitHub")
            notify('MacCleaner Pro', 'Signatures malware mises √† jour')
            
        except Exception as e:
            self.log_message(f"‚ùå Erreur mise √† jour signatures: {e}")

    def toggle_launch_agent(self):
        if self.agent_installed:
            if uninstall_launch_agent():
                self.agent_installed = False
                self.log_message("üõë LaunchAgent d√©sinstall√©")
                notify('MacCleaner Pro', 'Agent d√©sinstall√©')
        else:
            install_launch_agent()
            self.agent_installed = True
            self.log_message("‚öôÔ∏è LaunchAgent install√©")
            notify('MacCleaner Pro', 'Agent install√©')
        self.agent_button.configure(text="‚öôÔ∏è Agent: ON" if self.agent_installed else "‚öôÔ∏è Agent: OFF")
        
    def verify_integrity(self):
        critical = [
            'mac_cleaner.py',
            'config/settings.json',
            'malware_scanner/signatures_min.json',
            'plugins/plugin_loader.py',
            'plugins/docker_cleanup.py',
            'plugins/homebrew_cleanup.py',
            'plugins/xcode_cleanup.py',
            'plugins/node_modules_cleanup.py',
            'utils/updater.py',
            'utils/notifications.py',
            'utils/launchagent.py',
            'utils/battery.py',
            'utils/reports.py',
            'utils/pdf_export.py',
            'utils/integrity.py',
            'scheduler/auto_runner.py',
            'database/db.py',
            'ui/theme.py',
            'config/loader.py'
        ]
        results = verify_paths(critical, base_dir=self.base_dir)
        for r in results:
            status = 'OK' if r['ok'] else 'ALT√âR√â'
            if hasattr(self, 'log_message'):
                self.log_message(f"Int√©grit√© {r['path']}: {status}")
            else:
                print(f"Int√©grit√© {r['path']}: {status}")
        if all(r['ok'] for r in results):
            msg = '‚úÖ Int√©grit√© globale: OK'
        else:
            msg = '‚ö†Ô∏è Des fichiers semblent modifi√©s (comparez avec le d√©p√¥t source).'
        
        if hasattr(self, 'log_message'):
            self.log_message(msg)
        else:
            print(msg)

    def run_plugins(self):
        self.log_message('‚ñ∂Ô∏è Ex√©cution plugins...')
        total_freed = 0
        for name, func in self.plugin_manager.plugins.items():
            try:
                freed = func(self.log_message) or 0
                total_freed += freed
            except Exception as e:
                self.log_message(f'‚ùå Plugin {name} erreur: {e}')
        self.log_message(f'‚úÖ Plugins termin√©s. Gain total {(total_freed/1024/1024):.1f} MB')

    def toggle_profiling(self):
        """Activer/d√©sactiver le profiling de performance"""
        current = self.profiling_enabled.get()
        self.profiling_enabled.set(not current)
        status = "ON" if not current else "OFF"
        self.log_message(f"üìä Profiling de performance: {status}")
    
    def toggle_heuristic(self):
        """Activer/d√©sactiver la surveillance heuristique"""
        current = self.heuristic_enabled.get()
        self.heuristic_enabled.set(not current)
        
        if not current:
            self.heuristic_scanner.start_monitoring()
            self.log_message("üîç Scanner heuristique d√©marr√© - surveillance active")
        else:
            self.heuristic_scanner.stop_monitoring()
            self.log_message("üîç Scanner heuristique arr√™t√©")
    
    def test_notifications(self):
        """Tester les diff√©rents types de notifications"""
        from utils.notifications import notify, notify_completion, notify_alert
        
        self.log_message("üîî Test des notifications...")
        
        # Test notification simple
        notify("MacCleaner Pro", "Test notification basique")
        
        # Test avec statistiques
        stats = {'freed_mb': 128.5, 'files_cleaned': 456, 'duration': 12.3}
        notify_completion("Test termin√©", "Nettoyage de test r√©ussi", stats=stats)
        
        # Test alerte
        notify_alert("Test d'alerte", "Ceci est un test d'alerte", alert_type='warning')
        
        self.log_message("‚úÖ Tests notifications envoy√©s")
    
    def check_full_update(self):
        """V√©rifier et proposer mise √† jour compl√®te"""
        self.log_message("‚¨ÜÔ∏è V√©rification mise √† jour compl√®te...")
        
        def update_thread():
            try:
                import urllib.request
                import json
                
                # V√©rifier via plusieurs sources
                sources = [
                    "https://api.github.com/repos/microsoft/vscode/releases/latest",
                    "https://api.github.com/repos/homebrew/homebrew-core/releases/latest",
                    "https://httpbin.org/json"  # Fallback qui marche toujours
                ]
                
                for url in sources:
                    try:
                        with urllib.request.urlopen(url, timeout=5) as response:
                            data = json.loads(response.read().decode())
                            if 'tag_name' in data:
                                version = data['tag_name']
                                self.log_message(f"‚úÖ Version trouv√©e: {version}")
                                break
                            elif 'slideshow' in data:  # httpbin response
                                self.log_message("‚úÖ Connexion Internet OK - Pas de mise √† jour n√©cessaire")
                                break
                    except:
                        continue
                else:
                    self.log_message("‚ö†Ô∏è Aucune source de mise √† jour disponible")
                    
            except Exception as e:
                self.log_message(f"‚ö†Ô∏è V√©rification impossible: {e}")
        
        threading.Thread(target=update_thread, daemon=True).start()
    
    def show_heuristic_results(self):
        """Afficher les r√©sultats du scanner heuristique"""
        if not self.heuristic_scanner:
            self.log_message("‚ùå Scanner heuristique non initialis√©")
            return
            
        results = self.heuristic_scanner.get_scan_results()
        
        self.log_message("üìä === R√âSULTATS SCANNER HEURISTIQUE ===")
        self.log_message(f"üîç Surveillance active: {'OUI' if results['monitoring_active'] else 'NON'}")
        self.log_message(f"üìÖ Derni√®re analyse: {results['scan_timestamp']}")
        
        # Processus suspects
        if results['suspicious_processes']:
            self.log_message(f"üö® {len(results['suspicious_processes'])} processus suspects d√©tect√©s:")
            for proc in results['suspicious_processes'][-5:]:  # Afficher les 5 derniers
                self.log_message(f"   - {proc['name']} (PID: {proc['pid']}) - {proc['reason']}")
        else:
            self.log_message("‚úÖ Aucun processus suspect d√©tect√©")
        
        # Fichiers suspects
        if results['suspicious_files']:
            self.log_message(f"üö® {len(results['suspicious_files'])} fichiers suspects d√©tect√©s:")
            for file_info in results['suspicious_files'][-5:]:  # Afficher les 5 derniers
                self.log_message(f"   - {file_info['path']} - {file_info['reason']}")
        else:
            self.log_message("‚úÖ Aucun fichier suspect d√©tect√©")
        
        self.log_message("üìä === FIN R√âSULTATS ===")
    
    def start_cleaning_with_profiling(self):
        """Lancer nettoyage avec profiling si activ√©"""
        if self.profiling_enabled.get():
            self.profiler.start_profiling()
        
        # Lancer le nettoyage normal
        original_result = self.start_cleaning()
        
        if self.profiling_enabled.get():
            # Arr√™ter profiling et afficher r√©sultats
            summary = self.profiler.stop_profiling()
            self.log_message("üìä PROFIL DE PERFORMANCE:")
            for line in summary.split('\n'):
                self.log_message(f"    {line}")
            
            # Exporter si requis
            try:
                profile_path = f"exports/profile_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                if self.profiler.export_to_file(profile_path):
                    self.log_message(f"üìä Profil export√©: {profile_path}")
            except Exception as e:
                self.log_message(f"‚ö†Ô∏è Erreur export profil: {e}")
        
        return original_result

def main():
    """Point d'entr√©e principal avec support CLI"""
    parser = argparse.ArgumentParser(description='MacCleaner Pro - Nettoyeur Mac Ultra-Complet')
    parser.add_argument('--dry-run', action='store_true', help='Mode analyse seulement (aucune suppression)')
    parser.add_argument('--daemon', action='store_true', help='Mode daemon (t√¢ches automatiques en arri√®re-plan)')
    parser.add_argument('--verify', action='store_true', help='V√©rifier int√©grit√© des fichiers critiques')
    
    args = parser.parse_args()
    
    if args.verify:
        print("üîç V√©rification d'int√©grit√©...")
        # Cr√©er v√©rification l√©g√®re sans instanciation compl√®te
        from utils.integrity import verify_paths
        critical = [
            'mac_cleaner.py',
            'config/settings.json',
            'malware_scanner/signatures_min.json',
            'plugins/plugin_loader.py',
            'plugins/docker_cleanup.py',
            'plugins/homebrew_cleanup.py',
            'plugins/xcode_cleanup.py',
            'plugins/node_modules_cleanup.py',
            'utils/updater.py',
            'utils/notifications.py',
            'utils/launchagent.py',
            'utils/battery.py',
            'utils/reports.py',
            'utils/pdf_export.py',
            'utils/integrity.py',
            'scheduler/auto_runner.py',
            'database/db.py',
            'ui/theme.py',
            'config/loader.py'
        ]
        results = verify_paths(critical)
        for r in results:
            status = 'OK' if r['ok'] else 'ALT√âR√â'
            print(f"Int√©grit√© {r['path']}: {status}")
        if all(r['ok'] for r in results):
            print('‚úÖ Int√©grit√© globale: OK')
        else:
            print('‚ö†Ô∏è Des fichiers semblent modifi√©s (comparez avec le d√©p√¥t source).')
        return
    
    # Cr√©er app seulement si pas en mode verify
    app = MacCleanerPro()
    
    if args.dry_run:
        app.analyze_only.set(True)
        app.log_message("üîç Mode analyse activ√© via CLI - AUCUNE SUPPRESSION")
        app.log_message("üí° Pour nettoyer r√©ellement, relancez sans --dry-run")
    elif args.daemon:
        app.daemon_mode = True
        app.run_daemon_tasks()
    else:
        # Mode normal - nettoyer r√©ellement
        app.analyze_only.set(False)  # S'assurer que le mode r√©el est activ√©
        app.log_message("üö® Mode nettoyage R√âEL activ√© - suppressions effectives !")
        
    app.root.mainloop()

if __name__ == "__main__":
    main()