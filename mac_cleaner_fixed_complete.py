#!/usr/bin/env python3
"""
MacCleaner Pro - Version COMPL√àTEMENT CORRIG√âE
Nettoyage en profondeur et optimisation avanc√©e pour macOS
"""

import os
import sys
import shutil
import subprocess
import threading
import time
from pathlib import Path
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
from datetime import datetime, timedelta
import json
import psutil
import plistlib
import sqlite3

# Imports conditionnels avec fallbacks
try:
    from config.loader import load_settings, save_settings
except ImportError:
    def load_settings():
        return {'scheduler': {'enabled': False}}
    def save_settings(settings):
        pass

try:
    from database.db import init_db, record_clean_run, stats_summary
except ImportError:
    def init_db():
        pass
    def record_clean_run(*args):
        pass
    def stats_summary():
        return {'total_runs': 0, 'total_space_freed_mb': 0, 'malware_detected': 0}

try:
    from utils.notifications import notify, notify_completion, notify_alert
except ImportError:
    def notify(*args, **kwargs):
        pass
    def notify_completion(*args, **kwargs):
        pass
    def notify_alert(*args, **kwargs):
        pass

try:
    from plugins.plugin_loader import PluginManager
except ImportError:
    class PluginManager:
        def __init__(self, *args, **kwargs):
            pass

class MacCleanerPro:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("MacCleaner Pro - Nettoyage Ultra-Complet")
        self.root.geometry("900x700")
        self.root.configure(bg='#2c3e50')
        
        # Variables de contr√¥le
        self.cleaning_active = False
        self.total_freed_space = 0
        self.icloud_protected_files = set()
        self.analyzed_files = []
        self.protect_icloud = tk.BooleanVar(value=True)
        self.analyze_only = tk.BooleanVar(value=False)
        self.profiling_enabled = tk.BooleanVar(value=False)  # CORRECTION : Variable manquante
        
        # Configuration des chemins √† nettoyer
        self.cleanup_paths = {
            'System Caches': [
                '~/Library/Caches',
                '/Library/Caches'
            ],
            'User Caches': [
                '~/Library/Application Support/*/Caches',
                '~/Library/Safari/LocalStorage',
                '~/Library/Safari/Databases',
                '~/Library/Cookies'
            ],
            'Logs & Diagnostics': [
                '~/Library/Logs',
                '/var/log',
                '/Library/Logs'
            ],
            'Downloads & Trash': [
                '~/Downloads',
                '~/.Trash'
            ],
            'Browser Data': [
                '~/Library/Safari/History.db',
                '~/Library/Application Support/Google/Chrome/Default/History'
            ],
            'System Temp': [
                '/tmp',
                '/var/tmp'
            ]
        }
        
        # Initialisation des composants
        try:
            self.settings = load_settings()
            init_db()
            self.plugin_manager = PluginManager(log_fn=self.log_message)
        except Exception as e:
            print(f"Erreur initialisation modules: {e}")
            self.settings = {'scheduler': {'enabled': False}}
            self.plugin_manager = None
        
        self.setup_gui()
        
    def log_message(self, message):
        """M√©thode de logging am√©lior√©e"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        print(log_entry)
        
        # Ajouter au widget de log si disponible
        if hasattr(self, 'log_text'):
            self.log_text.insert(tk.END, log_entry + "\n")
            self.log_text.see(tk.END)
            self.root.update_idletasks()
        
    def setup_gui(self):
        """Configuration de l'interface graphique CORRIG√âE"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Titre
        title_label = ttk.Label(main_frame, text="üßπ MacCleaner Pro", 
                               font=('Arial', 24, 'bold'))
        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 20))
        
        # Informations syst√®me
        self.create_system_info(main_frame)
        
        # Options de nettoyage
        self.create_cleanup_options(main_frame)
        
        # Zone de progression et logs
        self.create_progress_area(main_frame)
        
        # Boutons d'action
        self.create_action_buttons(main_frame)
        
        # Configuration de la grille
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
    def create_system_info(self, parent):
        """Cr√©ation de la section d'informations syst√®me"""
        info_frame = ttk.LabelFrame(parent, text="Informations Syst√®me", padding="10")
        info_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 20))
        
        # Informations syst√®me
        try:
            disk_usage = shutil.disk_usage('/')
            total_gb = disk_usage.total / (1024**3)
            used_gb = disk_usage.used / (1024**3)
            free_gb = disk_usage.free / (1024**3)
            
            memory = psutil.virtual_memory()
            
            info_text = f"""üíæ Disque: {used_gb:.1f}GB utilis√© / {total_gb:.1f}GB total ({free_gb:.1f}GB libre)
üß† RAM: {memory.percent}% utilis√©e ({memory.used / (1024**3):.1f}GB / {memory.total / (1024**3):.1f}GB)
‚ö° CPU: {psutil.cpu_percent(interval=0.1)}% d'utilisation
üñ•Ô∏è Syst√®me: {os.uname().sysname} {os.uname().release}"""
        except Exception as e:
            info_text = f"‚ö†Ô∏è Erreur lors de la r√©cup√©ration des informations syst√®me: {e}"
            
        self.info_label = ttk.Label(info_frame, text=info_text, font=('Monaco', 10))
        self.info_label.grid(row=0, column=0, sticky=tk.W)
        
    def create_cleanup_options(self, parent):
        """Cr√©ation des options de nettoyage CORRIG√âE"""
        options_frame = ttk.LabelFrame(parent, text="Options de Nettoyage", padding="10")
        options_frame.grid(row=2, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 20))
        
        self.cleanup_vars = {}
        row = 0
        
        for category, paths in self.cleanup_paths.items():
            var = tk.BooleanVar(value=True)
            self.cleanup_vars[category] = var
            
            checkbox = ttk.Checkbutton(options_frame, text=category, variable=var)
            checkbox.grid(row=row, column=0, sticky=tk.W, pady=2)
            
            # Estimation de l'espace
            size_label = ttk.Label(options_frame, text="Calcul...", foreground='gray')
            size_label.grid(row=row, column=1, sticky=tk.E, padx=(10, 0))
            
            # Calculer la taille en arri√®re-plan
            threading.Thread(target=self.calculate_size, args=(category, paths, size_label), daemon=True).start()
            
            row += 1
            
        # Protection iCloud et options d'analyse
        protection_frame = ttk.LabelFrame(options_frame, text="Protection et Analyse", padding="5")
        protection_frame.grid(row=row, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(10, 0))
        
        ttk.Checkbutton(protection_frame, text="üîí Prot√©ger les fichiers iCloud", 
                       variable=self.protect_icloud).grid(row=0, column=0, sticky=tk.W, padx=5, pady=2)
        
        ttk.Checkbutton(protection_frame, text="üîç Mode analyse seulement (ne pas supprimer)", 
                       variable=self.analyze_only).grid(row=0, column=1, sticky=tk.W, padx=5, pady=2)
        
        # Options avanc√©es
        advanced_frame = ttk.LabelFrame(options_frame, text="Optimisations Avanc√©es", padding="5")
        advanced_frame.grid(row=row+1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(20, 0))
        
        self.optimize_vars = {
            'purge_memory': tk.BooleanVar(value=True),
            'rebuild_spotlight': tk.BooleanVar(value=False),
            'repair_permissions': tk.BooleanVar(value=True),
            'clear_dns_cache': tk.BooleanVar(value=True),
            'restart_finder': tk.BooleanVar(value=False),
            'maintenance_scripts': tk.BooleanVar(value=True)
        }
        
        optimize_options = [
            ('üöÄ Purger la m√©moire (RAM)', 'purge_memory'),
            ('üîç Reconstruire l\'index Spotlight', 'rebuild_spotlight'),
            ('üîß R√©parer les permissions', 'repair_permissions'),
            ('üåê Vider le cache DNS', 'clear_dns_cache'),
            ('üîÑ Red√©marrer le Finder', 'restart_finder'),
            ('‚öôÔ∏è Scripts de maintenance syst√®me', 'maintenance_scripts')
        ]
        
        for i, (text, key) in enumerate(optimize_options):
            ttk.Checkbutton(advanced_frame, text=text, 
                           variable=self.optimize_vars[key]).grid(row=i//2, column=i%2, 
                                                                 sticky=tk.W, padx=5, pady=2)
    
    def create_progress_area(self, parent):
        """Cr√©ation de la zone de progression"""
        progress_frame = ttk.LabelFrame(parent, text="Progression", padding="10")
        progress_frame.grid(row=2, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(20, 0), pady=(0, 20))
        
        # Barre de progression
        self.progress_var = tk.StringVar(value="Pr√™t √† nettoyer")
        self.progress_label = ttk.Label(progress_frame, textvariable=self.progress_var)
        self.progress_label.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 5))
        
        self.progress_bar = ttk.Progressbar(progress_frame, mode='determinate')
        self.progress_bar.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # Zone de logs
        self.log_text = scrolledtext.ScrolledText(progress_frame, height=15, width=40, 
                                                 font=('Monaco', 9))
        self.log_text.grid(row=2, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        progress_frame.columnconfigure(0, weight=1)
        progress_frame.rowconfigure(2, weight=1)
        
    def create_action_buttons(self, parent):
        """Cr√©ation des boutons d'action CORRIG√âE"""
        button_frame = ttk.Frame(parent)
        button_frame.grid(row=3, column=0, columnspan=2, pady=20)
        
        # Ligne 1 - Boutons principaux
        self.scan_button = ttk.Button(button_frame, text="üîç Scanner le Syst√®me", 
                                     command=self.scan_system)
        self.scan_button.grid(row=0, column=0, padx=5, pady=5)
        
        self.clean_button = ttk.Button(button_frame, text="üßπ Nettoyer Maintenant", 
                                      command=self.start_cleaning)
        self.clean_button.grid(row=0, column=1, padx=5, pady=5)
        
        self.optimize_button = ttk.Button(button_frame, text="‚ö° Optimiser", 
                                         command=self.optimize_system)
        self.optimize_button.grid(row=0, column=2, padx=5, pady=5)
        
        self.restore_button = ttk.Button(button_frame, text="‚Ü©Ô∏è Restaurer", 
                                        command=self.restore_backup)
        self.restore_button.grid(row=0, column=3, padx=5, pady=5)
        
        # Ligne 2 - Boutons secondaires
        self.analyze_button = ttk.Button(button_frame, text="üìä Rapport D√©taill√©", 
                                        command=self.generate_detailed_report)
        self.analyze_button.grid(row=1, column=0, padx=5, pady=5)
        
        self.icloud_button = ttk.Button(button_frame, text="‚òÅÔ∏è Analyser iCloud", 
                                       command=self.analyze_icloud)
        self.icloud_button.grid(row=1, column=1, padx=5, pady=5)
        
        # Ligne 3 - Boutons avanc√©s (si modules disponibles)
        try:
            self.scan_malware_button = ttk.Button(button_frame, text="üõ°Ô∏è Scan Malware", 
                                                 command=self.scan_malware_async)
            self.scan_malware_button.grid(row=2, column=0, padx=5, pady=5)
            
            self.plugins_button = ttk.Button(button_frame, text="üîå Plugins", 
                                           command=self.run_plugins)
            self.plugins_button.grid(row=2, column=1, padx=5, pady=5)
        except:
            pass

    def calculate_size(self, category, paths, label):
        """Calcul de la taille estim√©e pour une cat√©gorie"""
        try:
            total_size = 0
            for path in paths:
                expanded_path = os.path.expanduser(path)
                if os.path.exists(expanded_path):
                    if os.path.isfile(expanded_path):
                        total_size += os.path.getsize(expanded_path)
                    elif os.path.isdir(expanded_path):
                        for root, dirs, files in os.walk(expanded_path):
                            for file in files:
                                try:
                                    file_path = os.path.join(root, file)
                                    total_size += os.path.getsize(file_path)
                                except (OSError, IOError):
                                    continue
            
            # Convertir en unit√© lisible
            if total_size > 1024**3:
                size_str = f"{total_size / (1024**3):.1f} GB"
            elif total_size > 1024**2:
                size_str = f"{total_size / (1024**2):.1f} MB"
            else:
                size_str = f"{total_size / 1024:.1f} KB"
                
            label.configure(text=size_str)
        except Exception as e:
            label.configure(text="Erreur")

    def scan_system(self):
        """Scanner le syst√®me pour analyser les fichiers"""
        self.log_message("üîç D√©but du scan syst√®me...")
        self.progress_bar['value'] = 0
        self.progress_var.set("Scan en cours...")
        
        # Scan en thread s√©par√©
        threading.Thread(target=self._scan_system_thread, daemon=True).start()
        
    def _scan_system_thread(self):
        """Thread de scan syst√®me"""
        try:
            total_categories = len(self.cleanup_paths)
            current_category = 0
            
            for category, paths in self.cleanup_paths.items():
                if self.cleanup_vars[category].get():
                    self.log_message(f"üìÇ Scan de {category}...")
                    
                    for path in paths:
                        expanded_path = os.path.expanduser(path)
                        if os.path.exists(expanded_path):
                            if os.path.isfile(expanded_path):
                                self.analyzed_files.append(expanded_path)
                            elif os.path.isdir(expanded_path):
                                for root, dirs, files in os.walk(expanded_path):
                                    for file in files:
                                        self.analyzed_files.append(os.path.join(root, file))
                
                current_category += 1
                progress = (current_category / total_categories) * 100
                self.progress_bar['value'] = progress
                self.root.update_idletasks()
            
            self.log_message(f"‚úÖ Scan termin√© ! {len(self.analyzed_files)} fichiers analys√©s")
            self.progress_var.set("Scan termin√©")
            
        except Exception as e:
            self.log_message(f"‚ùå Erreur during scan: {e}")

    def start_cleaning(self, auto=False):
        """D√©marrer le nettoyage (R√âEL ou ANALYSE selon le mode)"""
        if self.cleaning_active:
            self.log_message("‚ö†Ô∏è Nettoyage d√©j√† en cours...")
            return
            
        # V√©rifier le mode avant de commencer
        if self.analyze_only.get():
            self.log_message("üîç MODE ANALYSE ACTIV√â - Aucune suppression ne sera effectu√©e")
            self.log_message("üí° D√©sactivez 'Mode analyse seulement' pour nettoyer r√©ellement")
            mode_text = "ANALYSE"
            action_verb = "analyser"
        else:
            self.log_message("üö® MODE NETTOYAGE R√âEL - Des fichiers seront supprim√©s d√©finitivement !")
            mode_text = "NETTOYAGE R√âEL"
            action_verb = "nettoyer"
            
        if not auto:
            # Message d'avertissement diff√©rent selon le mode
            if self.analyze_only.get():
                warning_msg = f"""üîç {mode_text}

Cette analyse va examiner votre syst√®me sans supprimer aucun fichier.

Actions qui seront effectu√©es :
‚Ä¢ Scan de la corbeille (pas de vidage)
‚Ä¢ Analyse des caches (pas de suppression)
‚Ä¢ Scan des fichiers temporaires (pas de suppression)
‚Ä¢ Estimation de l'espace r√©cup√©rable

‚úÖ Aucun fichier ne sera supprim√©
‚úÖ Action totalement s√©curis√©e

Voulez-vous proc√©der √† l'{mode_text} ?"""
            else:
                warning_msg = f"""‚ö†Ô∏è ATTENTION - {mode_text} ‚ö†Ô∏è

Ce nettoyage va SUPPRIMER D√âFINITIVEMENT des fichiers de votre Mac.

Actions qui seront effectu√©es :
‚Ä¢ Vidage de la corbeille
‚Ä¢ Suppression des caches syst√®me
‚Ä¢ Suppression des fichiers temporaires
‚Ä¢ Optimisations syst√®me

‚ö†Ô∏è Cette action est IRR√âVERSIBLE !
‚ö†Ô∏è Assurez-vous d'avoir sauvegard√© vos donn√©es importantes

Voulez-vous vraiment proc√©der au {mode_text} ?"""
            
            if not messagebox.askyesno(f"{mode_text}", warning_msg):
                self.log_message(f"‚ùå {mode_text} annul√© par l'utilisateur")
                return
        
        self.cleaning_active = True
        self.total_freed_space = 0
        self.progress_bar['value'] = 0
        self.progress_var.set(f"{mode_text} en cours...")
        
        # D√©marrer le nettoyage en thread s√©par√©
        threading.Thread(target=self._cleaning_thread, daemon=True).start()

    def _cleaning_thread(self):
        """Thread principal de nettoyage CORRIG√â"""
        try:
            self.log_message(f"üöÄ D√©but du {'nettoyage R√âEL' if not self.analyze_only.get() else 'analyse'}...")
            
            total_steps = len([cat for cat in self.cleanup_paths if self.cleanup_vars[cat].get()]) + 2
            current_step = 0
            
            # √âtape 1: Nettoyage des cat√©gories s√©lectionn√©es
            for category, paths in self.cleanup_paths.items():
                if self.cleanup_vars[category].get():
                    if self.analyze_only.get():
                        self.log_message(f"üîç ANALYSE de {category}...")
                    else:
                        self.log_message(f"üßπ NETTOYAGE R√âEL de {category}...")
                    
                    for path in paths:
                        self.clean_path(path)
                    
                    current_step += 1
                    progress = (current_step / total_steps) * 90  # 90% pour les cat√©gories
                    self.progress_bar['value'] = progress
                    self.root.update_idletasks()
            
            # √âtape 2: Optimisations syst√®me (seulement en mode r√©el)
            if not self.analyze_only.get():
                self.log_message("‚ö° Optimisations syst√®me...")
                self.perform_optimizations()
            else:
                self.log_message("üìä Analyse des optimisations possibles...")
            
            current_step += 1
            self.progress_bar['value'] = 95
            self.root.update_idletasks()
            
            # √âtape 3: Finalisation
            if self.analyze_only.get():
                self.log_message("‚úÖ ANALYSE TERMIN√âE !")
                self.log_message(f"üìä Espace r√©cup√©rable estim√©: {self.total_freed_space / (1024*1024):.1f} MB")
                notify_completion("Analyse termin√©e", f"Espace r√©cup√©rable: {self.total_freed_space / (1024*1024):.1f} MB")
            else:
                self.log_message("‚úÖ NETTOYAGE R√âEL TERMIN√â !")
                self.log_message(f"üíæ ESPACE TOTAL LIB√âR√â: {self.total_freed_space / (1024*1024):.1f} MB")
                notify_completion("Nettoyage termin√©", f"Espace lib√©r√©: {self.total_freed_space / (1024*1024):.1f} MB")
                
                # Enregistrer dans la base de donn√©es
                try:
                    record_clean_run(self.total_freed_space / (1024*1024), len(self.analyzed_files))
                except:
                    pass
            
            self.progress_bar['value'] = 100
            self.progress_var.set("Termin√© !")
            
        except Exception as e:
            self.log_message(f"‚ùå Erreur pendant le nettoyage: {e}")
            import traceback
            traceback.print_exc()
        finally:
            self.cleaning_active = False

    def clean_path(self, path):
        """Nettoyer un chemin sp√©cifique (R√âEL ou ANALYSE)"""
        try:
            expanded_path = os.path.expanduser(path)
            
            if not os.path.exists(expanded_path):
                return
            
            if self.analyze_only.get():
                # Mode analyse : calculer seulement la taille
                if os.path.isfile(expanded_path):
                    size = os.path.getsize(expanded_path)
                    self.total_freed_space += size
                    self.log_message(f"üìã Analyserait: {expanded_path} ({size} bytes)")
                elif os.path.isdir(expanded_path):
                    for root, dirs, files in os.walk(expanded_path):
                        for file in files:
                            try:
                                file_path = os.path.join(root, file)
                                size = os.path.getsize(file_path)
                                self.total_freed_space += size
                            except (OSError, IOError):
                                continue
                    self.log_message(f"üìÇ Analyserait le dossier: {expanded_path}")
            else:
                # Mode r√©el : supprimer effectivement
                if os.path.isfile(expanded_path):
                    size = os.path.getsize(expanded_path)
                    os.remove(expanded_path)
                    self.total_freed_space += size
                    self.log_message(f"üóëÔ∏è Supprim√©: {expanded_path} ({size} bytes)")
                elif os.path.isdir(expanded_path):
                    # Supprimer le contenu du dossier mais pas le dossier lui-m√™me
                    for root, dirs, files in os.walk(expanded_path, topdown=False):
                        for file in files:
                            try:
                                file_path = os.path.join(root, file)
                                size = os.path.getsize(file_path)
                                os.remove(file_path)
                                self.total_freed_space += size
                                self.log_message(f"üßπ Nettoyage R√âEL de {file_path}")
                            except (OSError, IOError) as e:
                                self.log_message(f"‚ö†Ô∏è Acc√®s refus√© √† {file_path}")
                        for dir in dirs:
                            try:
                                dir_path = os.path.join(root, dir)
                                if not os.listdir(dir_path):  # Seulement si vide
                                    os.rmdir(dir_path)
                            except (OSError, IOError):
                                pass
                                
        except Exception as e:
            self.log_message(f"‚ùå Erreur lors du nettoyage de {path}: {e}")

    def perform_optimizations(self):
        """Effectuer les optimisations syst√®me"""
        try:
            if self.optimize_vars['purge_memory'].get():
                self.log_message("üöÄ Purge de la m√©moire...")
                try:
                    subprocess.run(['sudo', 'purge'], check=False, capture_output=True)
                    self.log_message("‚úÖ M√©moire purg√©e")
                except:
                    self.log_message("‚ö†Ô∏è Purge m√©moire n√©cessite sudo")
                    
            if self.optimize_vars['clear_dns_cache'].get():
                self.log_message("üåê Vidage du cache DNS...")
                try:
                    subprocess.run(['sudo', 'dscacheutil', '-flushcache'], check=False, capture_output=True)
                    self.log_message("‚úÖ Cache DNS vid√©")
                except:
                    self.log_message("‚ö†Ô∏è Erreur lors du vidage DNS")
                    
            if self.optimize_vars['maintenance_scripts'].get():
                self.log_message("‚öôÔ∏è Scripts de maintenance...")
                try:
                    subprocess.run(['sudo', 'periodic', 'daily'], check=False, capture_output=True)
                    self.log_message("‚úÖ Maintenance ex√©cut√©e")
                except:
                    self.log_message("‚ö†Ô∏è Maintenance n√©cessite sudo")
                    
        except Exception as e:
            self.log_message(f"‚ùå Erreur optimisations: {e}")

    def optimize_system(self):
        """Optimiser le syst√®me"""
        if not messagebox.askyesno("Optimisation", "Voulez-vous optimiser le syst√®me ?"):
            return
            
        self.log_message("‚ö° D√©but des optimisations...")
        threading.Thread(target=self.perform_optimizations, daemon=True).start()

    # M√©thodes de fallback pour les fonctionnalit√©s optionnelles
    def scan_malware_async(self):
        """Scan malware (fallback si module non disponible)"""
        self.log_message("üõ°Ô∏è Fonction de scan malware non disponible")
        
    def run_plugins(self):
        """Ex√©cuter les plugins (fallback si module non disponible)"""
        if self.plugin_manager:
            self.log_message("üîå Ex√©cution des plugins...")
            # Logique d'ex√©cution des plugins
        else:
            self.log_message("üîå Aucun plugin disponible")
            
    def analyze_icloud(self):
        """Analyser iCloud (placeholder)"""
        self.log_message("‚òÅÔ∏è Analyse iCloud non impl√©ment√©e")
        
    def restore_backup(self):
        """Restaurer une sauvegarde (placeholder)"""
        self.log_message("‚Ü©Ô∏è Fonction de restauration non impl√©ment√©e")
        
    def generate_detailed_report(self):
        """G√©n√©rer un rapport d√©taill√© (placeholder)"""
        self.log_message("üìä G√©n√©ration de rapport non impl√©ment√©e")

    def run(self):
        """Lancer l'application"""
        self.log_message("üöÄ MacCleaner Pro d√©marr√© !")
        self.log_message("üí° S√©lectionnez les options et cliquez sur 'Nettoyer Maintenant'")
        self.root.mainloop()

def main():
    """Fonction principale avec gestion des arguments"""
    import argparse
    
    parser = argparse.ArgumentParser(description="MacCleaner Pro - Nettoyeur Mac Ultra-Complet")
    parser.add_argument("--dry-run", action="store_true", 
                       help="Mode analyse seulement (aucune suppression)")
    parser.add_argument("--verify", action="store_true", 
                       help="V√©rifier int√©grit√© des fichiers critiques")
    
    args = parser.parse_args()
    
    app = MacCleanerPro()
    
    # Appliquer les arguments
    if args.dry_run:
        app.analyze_only.set(True)
        app.log_message("üîç Mode analyse activ√© via --dry-run")
    
    app.run()

if __name__ == "__main__":
    main()