import os, pathlib, time, shutil
from datetime import datetime, timedelta

# Dossiers √† scanner pour node_modules
SEARCH_PATHS = [
    pathlib.Path.home() / 'Documents',
    pathlib.Path.home() / 'Desktop', 
    pathlib.Path.home() / 'Downloads',
    pathlib.Path('/Users/Shared'),
    pathlib.Path('/tmp')
]

def dir_size(path):
    """Calcule la taille d'un r√©pertoire en octets"""
    total = 0
    try:
        for root, dirs, files in os.walk(path):
            for f in files:
                try:
                    total += os.path.getsize(os.path.join(root, f))
                except (OSError, IOError):
                    pass
    except (OSError, IOError):
        pass
    return total

def find_node_modules(base_paths, min_age_days=30, min_size_mb=50):
    """Trouve les dossiers node_modules anciens et volumineux"""
    candidates = []
    cutoff_time = time.time() - (min_age_days * 24 * 3600)
    min_size_bytes = min_size_mb * 1024 * 1024
    
    for base in base_paths:
        if not base.exists():
            continue
        try:
            # Recherche r√©cursive limit√©e √† 4 niveaux pour √©viter scan trop profond
            for root, dirs, files in os.walk(base):
                # Limiter profondeur
                level = root.replace(str(base), '').count(os.sep)
                if level >= 4:
                    dirs[:] = []  # Ne pas descendre plus profond
                    continue
                    
                if 'node_modules' in dirs:
                    nm_path = pathlib.Path(root) / 'node_modules'
                    try:
                        stat = nm_path.stat()
                        if stat.st_mtime < cutoff_time:
                            size = dir_size(nm_path)
                            if size >= min_size_bytes:
                                candidates.append({
                                    'path': nm_path,
                                    'size': size,
                                    'age_days': (time.time() - stat.st_mtime) / (24 * 3600),
                                    'parent': pathlib.Path(root)
                                })
                    except OSError:
                        pass
                        
        except (OSError, PermissionError):
            continue
    
    return sorted(candidates, key=lambda x: x['size'], reverse=True)

def run(log):
    """Point d'entr√©e principal du plugin"""
    log('üü¢ Recherche des dossiers node_modules volumineux...')
    
    candidates = find_node_modules(SEARCH_PATHS)
    
    if not candidates:
        log('‚ÑπÔ∏è Aucun dossier node_modules volumineux trouv√©')
        return 0
    
    total_freed = 0
    cleaned_count = 0
    
    for item in candidates[:10]:  # Limiter √† 10 pour √©viter suppression massive
        path = item['path']
        size = item['size']
        age = item['age_days']
        
        log(f"üì¶ Trouv√©: {path} ({size/1024/1024:.1f} MB, {age:.0f} jours)")
        
        # V√©rifier que c'est bien un node_modules et pas un faux positif
        if path.name == 'node_modules' and path.is_dir():
            try:
                # V√©rifier s'il y a un package.json parent (projet actif potentiel)
                parent_package = item['parent'] / 'package.json'
                if parent_package.exists():
                    # Projet potentiellement actif, plus prudent
                    if age < 90:  # Moins de 3 mois = skip
                        log(f"‚ö†Ô∏è Skip {path} (projet r√©cent avec package.json)")
                        continue
                
                # Supprimer le dossier node_modules
                shutil.rmtree(path)
                total_freed += size
                cleaned_count += 1
                log(f"‚úÖ Supprim√©: {path} ({size/1024/1024:.1f} MB lib√©r√©s)")
                
            except (OSError, PermissionError) as e:
                log(f"‚ùå Erreur suppression {path}: {e}")
    
    if cleaned_count > 0:
        log(f'‚úÖ Node.js cleanup: {cleaned_count} dossiers, {total_freed/1024/1024:.1f} MB lib√©r√©s')
    else:
        log('‚ÑπÔ∏è Aucun dossier node_modules supprim√© (crit√®res de s√©curit√©)')
    
    return total_freed