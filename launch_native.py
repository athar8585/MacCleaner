#!/usr/bin/env python3
"""
MacCleaner Pro - Lanceur pour Interface Native macOS
G√®re le lancement avec gestion des d√©pendances
"""

import sys
import os
import subprocess
import importlib.util

def check_pyobjc():
    """V√©rifier l'installation de PyObjC"""
    try:
        import objc
        from Foundation import NSObject
        from AppKit import NSApplication
        from Cocoa import NSWindow
        print("‚úÖ PyObjC d√©tect√© - Interface native disponible")
        return True
    except ImportError as e:
        print(f"‚ùå PyObjC manquant: {e}")
        return False

def check_dependencies():
    """V√©rifier toutes les d√©pendances"""
    dependencies = {
        'psutil': 'Informations syst√®me',
        'objc': 'Interface native macOS',
        'Foundation': 'Frameworks macOS',
        'AppKit': 'Interface utilisateur macOS'
    }
    
    missing = []
    for dep, desc in dependencies.items():
        try:
            __import__(dep)
            print(f"‚úÖ {dep}: {desc}")
        except ImportError:
            print(f"‚ùå {dep}: {desc} - MANQUANT")
            missing.append(dep)
    
    return len(missing) == 0

def install_missing_deps():
    """Installer les d√©pendances manquantes"""
    print("\nüîß Installation des d√©pendances manquantes...")
    
    packages = [
        'psutil',
        'pyobjc-framework-Cocoa', 
        'pyobjc-framework-AppKit',
        'pyobjc-framework-Foundation'
    ]
    
    for package in packages:
        try:
            print(f"üì¶ Installation de {package}...")
            subprocess.check_call([
                sys.executable, '-m', 'pip', 'install', package
            ])
            print(f"‚úÖ {package} install√©")
        except subprocess.CalledProcessError:
            print(f"‚ùå √âchec installation {package}")
            return False
    
    return True

def launch_native_interface():
    """Lancer l'interface native macOS"""
    print("\nüöÄ Lancement de l'interface native macOS...")
    
    try:
        # Importer et lancer
        import mac_cleaner_native
        mac_cleaner_native.main()
        
    except Exception as e:
        print(f"‚ùå Erreur interface native: {e}")
        print("üîÑ Fallback vers interface Tkinter...")
        launch_fallback()

def launch_fallback():
    """Lancer l'interface de fallback Tkinter"""
    fallback_files = [
        "demo_visual.py",
        "macos_interface.py", 
        "mac_cleaner_gui.py"
    ]
    
    for fallback in fallback_files:
        if os.path.exists(fallback):
            print(f"üîÑ Lancement de {fallback}...")
            try:
                subprocess.run([sys.executable, fallback])
                return
            except Exception as e:
                print(f"‚ùå √âchec {fallback}: {e}")
                continue
    
    print("‚ùå Aucune interface disponible")

def main():
    """Point d'entr√©e principal"""
    print("üçé MacCleaner Pro - Lanceur Interface Native")
    print("=" * 50)
    
    # V√©rifier les d√©pendances
    if check_dependencies():
        print("\n‚úÖ Toutes les d√©pendances sont pr√©sentes")
        launch_native_interface()
    else:
        print("\n‚ö†Ô∏è D√©pendances manquantes d√©tect√©es")
        
        response = input("Installer automatiquement? (y/n): ").lower()
        if response in ['y', 'yes', 'oui', '']:
            if install_missing_deps():
                print("\n‚úÖ Installation termin√©e")
                launch_native_interface()
            else:
                print("\n‚ùå Installation √©chou√©e")
                launch_fallback()
        else:
            launch_fallback()

if __name__ == "__main__":
    main()